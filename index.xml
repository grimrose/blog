<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>open build/reports/life/index.html</title><link>https://www.grimrose.org/blog/</link><description>Recent content on open build/reports/life/index.html</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 31 Dec 2021 09:12:36 +0000</lastBuildDate><atom:link href="https://www.grimrose.org/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>2021年の振り返り</title><link>https://www.grimrose.org/blog/2021/12/retrospect/</link><pubDate>Fri, 31 Dec 2021 09:12:36 +0000</pubDate><guid>https://www.grimrose.org/blog/2021/12/retrospect/</guid><description>はじめに 今年も大晦日になったので、振り返ってみたいと思います。
2020年の振り返りは、こちらでした。
やってみたかったことの振り返り 2021年にやってみたかったことは、以下のとおりでした。
4年位更新していないランディングページを新しくしてみたい 自分が趣味で利用しているGCPでもterraformを使ってみたい。 趣味でコードを書くことがめっきり減ってしまった1年でした。
その為かランディングページとblogの更新も全くやらず仕舞いでした。また、terraformもだいぶ理解は進んだものの手つかずでした。
一度失った習慣は取り戻すのは難しいことを実感しました。
今年買ってよかったもの 今年から習慣になったのは自宅でコーヒーを飲むようになったことです。
Nespressoを導入したおかけでエスプレッソを簡単に飲める様になったので仕事を始める前に飲むという習慣ができました。 その日の気分でいろいろ試してみたりして好みを見つけてみたりしました。
また、ハンドドリップの道具も以下のものを揃えました
キッチンスケール 細口の電気ケトル 手動のコーヒーミル ドリッパー V60 V60 MUGEN ブルーボトル Delter Coffee Press いろいろとレビューとかを参考にしてこのラインナップになっていました。
特にドリッパーの中でもV60のMUGENは一番使い勝手がいいのでとても重宝しています。
近所に自家焙煎をやっているお店を見つけたのもこの習慣が出来てからでした。
コーヒー豆のサブスクリプションも2つほど試してみました
https://white-coffee.jp/ https://postcoffee.co/ まずwhite coffeeの好み診断と好み探求を試してみて自分が好きな傾向は何なのかを知ることが出来ました。 特に深煎の中でもいろいろな方面があることが分かったのはやっていてとても良かったです。
post coffeeの方は12月から始めてみたので今後が楽しみです。
2022年にやってみたいこと コロナ禍でなかなか出来なかった遠出をしてみたいので、取り寄せで美味しかったクラフトビールや日本酒の産地に行って現地で呑んでみたいと思ってます。
おわりに 今年も全くblogを書いていなかったのですが、しばらくは書く気になるまではhugoのメンテナンスをしておきたいと思います。
2022年もよろしくお願いいたします。</description></item><item><title>2020年の振り返り</title><link>https://www.grimrose.org/blog/2020/12/retrospect/</link><pubDate>Thu, 31 Dec 2020 08:06:16 +0000</pubDate><guid>https://www.grimrose.org/blog/2020/12/retrospect/</guid><description>はじめに 今年も大晦日になったので、振り返ってみたいと思います。
2019年の振り返りは、こちらでした。
やってみたかったことの振り返り 2020年にやってみたかったことは、以下のとおりでした。
typelevelのプロダクトを発表する Cloud Runを使ってGraalVMでnativeに出来るScalaのフレームワークを試す コロナ禍のおかげで、そもそも出勤することが数える程度になりずっとリモートワークになってしまったので、帰宅の途中で勉強会に参加することも無くなってしまいました。
リモートワークのおかげで自宅でコードをずっと書いていたので、仕事が終わったあとまでコードを書くモチベーションが無くなってました。
また、発表したいこともコードを書くことが無くなった影響で持ちネタが無く、勉強会やカンファレンスが軒並みオンラインになってしまったので、参加するだけで満足してしまいました。
今はだいぶ落ち着いてきた気がするので、自分のコードを書く機会を少しでも増やしていくのが目標になっています。
リモートワークと環境整備 通勤するのは元々苦ではなかったのですが、リモートワークを始めて分かったのが気持ちの切り替えになっていたことでした。
加えて、なるべく新しい店を探すためにランチを外で取っていたのが出来なくなり、自宅の周りは住宅街なのでそんなにランチのバリエーションがなかったのが影響してました。
リモートワークの環境を整えるため、PCの机と椅子は重要だと思い割と初期の段階で揃えました。
特に椅子については会社の元同僚に紹介された店に行って実際に座ってみて相談しながら決めました。今年買って良かったもので紹介します。
ここで長時間座って悩んで相談もして選んでみた。
自分にfitした椅子を買えて良かった😊https://t.co/dPdH6zmYog
&amp;mdash; とーます (@grimrose) April 4, 2020 まずはPCラックをモニター置きに変えて、机を高さを買えられる Bauhütteのコックピットデスク を購入しました(ついさっきバージョンアップして不満点が解消されているのを知りました)。
マイクは２月頃にリモートワークが始まった頃に Umpire を購入してました。その後に品切れになっていたりしていて早めに買っていて良かったと思いました。
Webカメラは、 ロジクールのC615n にしました。三脚用の穴がついているのが決め手でした。後でカメラ用のアームに乗せて自由な角度をつけられるようになったのでいい感じになりました。
my workspace version up pic.twitter.com/qyzIZt8TcM
&amp;mdash; とーます (@grimrose) April 7, 2020 その後モニターが大きいのがいいなと思ったので、EIZOのEV3895 を購入しました。
my new gear pic.twitter.com/R7YnsjocaE
&amp;mdash; とーます (@grimrose) November 7, 2020 今の所この環境で不満がだいぶ解消されたのでしばらくはこのままだろうと思います。
今年買ってよかったもの ergohuman pro</description></item><item><title>オーダーメイド枕をお願いしてみた</title><link>https://www.grimrose.org/blog/2020/01/order-pillow/</link><pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2020/01/order-pillow/</guid><description>はじめに 知り合いの人から、ソウ・エクスペリエンスの体験型ギフトを贈ってもらったのですが、その中から今回はオーダーメイド枕を作る体験を選んでみました。
オーダーメイド枕 当日の流れは、ここに載っている通りでした。
フィッティングをしていたときですが、段々と違和感がなくなっていく感覚はとても良かったです。
また、その時に寝ていたマットレスが腰に全く違和感がなくてびっくりしました。
以前から、良いマットレスがあれば買おうかと思っていたのですが、なかなか体験できる機会がなかったので、悩みました。
ですが、気に入ってしまったのでオーダーメイド枕と併せて購入しました。
おわりに 利用し始めてから1ヶ月ほど経ちましたが、睡眠の質が上がったように感じます。
枕カバーの高さ等で若干の微調整が必要に思えるので、空いた時間にメンテナンスに行こうかと思っています。
体験型ギフトを贈ってくれた知り合いにはとても感謝しています。ありがとうございました。</description></item><item><title>2019年の振り返り</title><link>https://www.grimrose.org/blog/2019/12/retrospect/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2019/12/retrospect/</guid><description>今年も大晦日になったので、振り返ってみたいと思います。
2018年の振り返りは、こちらでした。
やってみたかったことの振り返り 2019にやってみたかったことは、以下のとおりでした。
Golangを使ったアプリケーションを作る AWS Lambdaを使ったプロダクトを作る ScalaのライブラリにContributeする Golangを使ったアプリケーションについては、一時期Cloud Functionsで利用しようかと考えていましたが、作りたいものと自分のスキルを鑑みて見合わせました。 まずは、チュートリアル的な内容である、slackへの通知からやっていこうかと思います。
AWS Lambdaを使ったプロダクトを作る機会がなくなってしまったのと、Cloud Functionsの事を調べていたので、触る機会がなくなってしまいました。
ScalaのライブラリへのContributeは、Cloud FunctionsでScala.jsを使ってみようとした過程で知ったpepegar/hammockにPRを出すことが出来ました。
やってみたかったことは、概ね出来たのでは無いかと思います。
やってきたことの振り返り 今年は、去年から継続していたOpenCensusに関する登壇をすることが出来ました。
OpenCensus meetup vol.1 に参加してきました #opencensusjp JJUG CCC 2019 Springに参加してきました #jjug_ccc OpenCensusは、OpenTelemetryへ移行中なので、引き続き注目していこうかと思います。
また、上記にも出てきましたが、自分で作ってみたいものをFirebaseの上で作ってみようかと思い立ったので、自分が今一番使える言語であるScalaとFirebaseで何が出来るかを調べていた過程で、Cloud FunctionsでScala.jsを使ってやれないか試していたのをまとめて、Scala関西Summit 2019で登壇しました。
Scala.jsでGoogle Cloud Functionsを利用する前に知りたかったこと blogを書いていなかったので、後で書きます。
今年の一番大きな出来事は、やはり転職でした。
12月で転職して半年が経って改めて思うのは、評価される環境で自分の能力を発揮できて、それを評価してもらえるのが、一番良かったと思えました。
少なくとも前職で私のエンジニアとしてのスキルを評価できる人が上には存在しなかったのは事実です。 もちろん、評価基準がそもそも違うので、単純に比較出来るものではありませんし、評価そのものが環境に依存しているものだと思うので、あくまでも現時点の評価は満足できるものではありました。
今年買ってよかったもの 今年は、挙げたらキリが無いのですが、ガジェットはこの2つが一番良かったと思います。
Satechi 75W デュアル Type-C PD トラベルチャージャー 2 MBP 13inchのを充電出来てかつ、もう一つのUSB Type-CでZenfone 5も充電出来るのでとてもありがたいです。
ただ、HyperJuice: World&amp;rsquo;s First &amp;amp; Smallest 100W GaN USB-C Charger も気になっています。</description></item><item><title>自分の好きなジン #gin #adventcalendar</title><link>https://www.grimrose.org/blog/2019/12/gin-and-vodka-advent-calendar/</link><pubDate>Tue, 03 Dec 2019 15:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2019/12/gin-and-vodka-advent-calendar/</guid><description>はじめに この記事はジン・ウォッカアドベントカレンダー の4日目の記事です。
3日目は、oh_skyさんの好きなジンについて書きますでした。
5日目は、reonaarticleさんの好きなジンについてです。
自分の好きなジンについて書いてみようと思います。
自分の好きなジン 以下の2つのジンが今の所自分の好きなジンです。
桜島小みかん Lonewolf Gin 出会ったのは、今年、天王洲アイルで開催されていたGIN FESTIVAL TOKYO ​2019でした。
GIN FESTIVAL TOKYO ​2019 Facebookの広告でふと見かけて興味を持ったので、参加してきました。
1杯100円で試飲できるということで、許容範囲内でできる限りまわってみました。
10ml程度ではあるのですが、コップから漂う香りや含んだ後に鼻から抜けていく香りを楽しんでました。
もちろん自分の好みに合わないのもありましたが、だんだんと傾向をつかむ過程はとても楽しかったです。
良かったと思った銘柄が手に入りにくいものだったり、名前だけ聞いたことがあるけど飲んだことがなかったのを試したりと、出会いもとても楽しかったです。
その中で、後からでも手に入れやすくて自分の好みにあったのが上記の2つでした。
好きな飲み方 自宅でも飲める飲み方なので、オーソドックスなジントニックが好きです。
ただ、トニックウォーターの入手先が限られているので、頻繁に飲めないのが残念です。
それ以外だと、炭酸水で割ってポッカのライムをちょっとだけ加えたジンリッキーですね。
他の飲み方は、他の方の紹介を見て覚えていこうと思ってます。
ローンウルフは、六本木にあるBrewDog でも飲めるので、六本木で勉強会が開催された後に向かうことが多いです。
元々BrewDogのクラフトビールが好きだったので、ジンも飲めることが分かったので更に好きな場所になりました。
おわりに 来年開催されるかはわかりませんが、気になったメーカーや銘柄がいろいろあったので、次回もGIN FESTIVAL TOKYOに参加してみたいと思っています。
&amp;ndash;</description></item><item><title>退職しました(4年7ヶ月ぶり2度目)</title><link>https://www.grimrose.org/blog/2019/05/career-change/</link><pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2019/05/career-change/</guid><description>はじめに 2019年06月30日を持って4年7ヶ月在籍した会社を退職します。
2019年05月31日が最終出社日でした。
from とある人材紹介会社 マーケティング部門 データエンジニア
to 多分そのうちバレるので、その時に察してください
なんで辞めるの? 前回の退職エントリは、こちら。
転職や異動といったものの個人的なスタンスは、こんな感じです。
特に転職活動をしていなかったのですが、様々な人から声かけてもらっていて、何度か面談をしていました。
もう一つのきっかけは、2018年の振り返りにも書いていた移行プロジェクトの目処が立ったのもありました。
このまま続けていくのか別の道を探すのかを考えていた時に、何度目かの面談をする機会があったので、もう少し詳しい話を聴いたら面白そうだったので、応募して面接して内定をいただきました。
ですので、今回の転職は全てが上手くフィットしていて、二度と無いようなめぐり合わせだと思いました。
ただし、タイミングが良いという部分が重なってしまい、辞退を申し出なければならない企業も出てきてしまったのが、本当に申し訳なかったと思いました。
面談や面接の中で私が認識していなかった強みや素養を見けてくださったのは、今後どのようなキャリアを進むことが良いのか考えることが出来、とても感謝しています。
これからどうすんの? Scala書く(はず)のと併せて、これまでのバックエンドやデータマネジメントに関する知識を活かせる仕事に就く予定です。
知り合いの人も何人か転職していましたし、凄い濃い人達がいっぱいいるので、「俺より強い奴に会いに行く」と「一番の下手くそでいよう」の2つの気持ちを持ちながら、 やっていこうかと思います。
おわりに 6月末のScalaMatsuri 2019が終わるまでは気を抜けないのであまり休みという感じはしませんが、 人生初の有給消化なので貪るように休みたいと思います。
今回例のリストは載せませんが、前回の退職エントリには残っているので、そちらからお願いします。 また、面倒くさい人向けにkampa!のリンクを置いておきますので、ご査収ください。
約5年間、本当にお世話になりました。</description></item><item><title>JJUG CCC 2019 Springに参加してきました #jjug_ccc</title><link>https://www.grimrose.org/blog/2019/05/jjug-ccc-2019/</link><pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2019/05/jjug-ccc-2019/</guid><description>はじめに http://www.java-users.jp/ccc2019spring/
2016年の登壇からしばらく聴く側にいました。
この1年くらいずっとOpenCensusを触っていましたがJJUG CCCでは話してなかったのと、micrometerを使っているので、そちらもあわせてCfPに出してみました。
運良くOpenCensusの方が採択されたので、今回はカスタムメトリクスの取り方を調べつつ自分たちのアプリケーションに組み込む方法を勉強できればと思い、いろいろ検証内容を元に発表できればと思っていました。
発表 OpenCensusで始める分散トレーシングと監視
今回の発表のベースとなったのは、Stackdriver担当者の@ymotongpooさんの以下の記事でした。
オブザーバビリティ（可観測性）がなぜ必要だと考えるのか
その後、ajitofm 42: You must unlearn what you have learnedを聴いたときに感じた内容(ツイートでは43となっているが42の間違い)と、
入門 監視を読み終えたので、これらをふまえてOpenCensusを使って実現していく方法とStackdriverによる可視化までを繋げられないかと思い、 構成を練っていました。
途中でOpenCensus meetup vol.1 で話す機会が得られたので、これまでに得られたOpenCensusのJava実装についてを発表しました。
残りの期間は、OpenCensusのカスタムメトリクスの取り方とGCP上でStackdriverを利用したデモの作成に取り組んでいました。
デモで利用したソースコードはこちらにあります。
https://github.com/grimrose/JJUG-CCC-2019-Spring
GitHubにpushしたのをトリガーにCloud Buildを利用して、GAEへデプロイをするようにしました。
GAEは、Stackdriverをそのまま使える環境なのと併せて、Custom Runtimeでやってみたことで、ローカルのデモと同じDocker imageをそのまま利用できたのがとても便利でした。
opencensus-scala のStatsに関するラッパーが用意されていたので、とても簡単にカスタムメトリクスを作ることが出来ました。
盛り込んだ内容だったので、かなり駆け足で発表してなんとか収めた感じでした。休憩ポイントを入れることで整える時間が出来たので今後の発表でも継続できればと思います。
参加したセッション 今回は、以下のセッションに参加してきました。
Big Data Exploration with Spark SQL and Java Cloud Native時代の開発環境とアプリケーション基盤 DevOps without Measurement is a Fail Cloud (K)native Java Services &amp;ndash; Deploying your Java services in Serverless World &amp;ndash; The 4 Rules of Simple Design In Functional Programming Project Loom - 限定継続と軽量スレッド Reladomoを使ったトランザクション履歴管理をプロダクトに適用した際のメリット/デメリット/課題など 特に DevOps without Measurement is a Fail はMonitoringについて気になっていたことがいくつかあったので、スライドが公開されたら見直してみたいと思いました。</description></item><item><title>OpenCensus meetup vol.1 に参加してきました #opencensusjp</title><link>https://www.grimrose.org/blog/2019/04/opencensus-meetup/</link><pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2019/04/opencensus-meetup/</guid><description>はじめに https://opencensus.connpass.com/event/123885/
OpenCensusの勉強会の初回ということもあり、他の言語の人達がどのように利用しているか興味があったので、参加してきました。
スライド はじめは、自分のこれまで話してきたことと、開発が進んでいるOpenCensus Serviceで何か話せないかと思い、LT枠で登録していました。 が、Observability JapanのDiscordで@ymotongpooさんが発表枠に移って欲しいというお誘いをいただいたので、 Javaの他のライブラリとの比較をふまえた上で、自分が思っている勘所を紹介する内容にしました。
他の登壇者の発表もとても参考になる内容だったので、興味深かったです。
まだExporterを自作するまでには至っていないので、研鑽を深めていければと思います。
スライドで宣伝しましたが、JJUG CCC 2019 SpringでOpenCensusで始める分散トレーシングと監視で話してきます。
今回の内容に、カスタムメトリクスの取り方をデモをでお見せできればと思いますが、詳細は未定です。
おわりに やばかった。
あと、 Observabilityは港区用語 というパワーワードの生まれた現場にいられてよかった。
次回の開催も楽しみにしています。</description></item><item><title>2018年の振り返り</title><link>https://www.grimrose.org/blog/2018/12/retrospect/</link><pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2018/12/retrospect/</guid><description>今年も大晦日になったので、振り返ってみたいと思います。
2017年の振り返りは、こちらでした。
やってみたかったことの振り返り 2018にやってみたかったことは、以下のとおりでした。
Golangを使ったクライアントの開発及び運用 Pythonを使ったシステムの構築及び運用(リベンジ) Alexa Skill or Action on Googleを使ったサービスを作る Golangを使ったクライアントについては、取り組むことが出来ずじまいだったので、リベンジしたいところです。
Pythonを使ったシステムの構築及び運用については、Jupyter notebookを積極的に利用することでPythonのエコシステムに慣れ、 Pipenvを利用した環境構築からDockerでの運用まで出来るようになりました。 とはいえ、Dockerを利用した継続的なテスト運用まで手を付けることが出来なかったのが、心残りです。
最後のスマートスピーカー周りは、本体だけ買って時刻の確認やポッドキャストのスピーカーとしてしか利用していない状況なので、 もう少し自分の役に立つスキルとか作ってみたかったのですが、手を付けることが出来ませんでした。
やってみたかったことがなかなか出来ない1年だったように見えますが、会社のプロジェクトの方が充実していたので、 そこまでネガティブな印象はありませんでした。
やってきたことの振り返り 今年は、会社の組織が変化していったので、それに伴いプロジェクトの方針やプロダクトそのものが変わっていったのが印象的でした。
その一環で、今までPHPで運用していた可視化のプロダクトが別のシステムに置き換わることが決まって、 新しいシステムへ移行するためにいろいろと整備をしたり、AWSについていろいろと検証していたりしていました。
また、自分たちで開発していたScalaのシステムを新しいシステムでも使えるようにモジュール分割をしつつ、 Clean Architectureに寄せていくメンテナンスをしていました。 その過程で、Airframeに触れたり、OpenCensusに触れたことで、 登壇する機会に恵まれたり、勉強会で様々な人と話せる機会を持つことが出来ました。
今年は、以下の内容で発表してきました。
Japan Container Days v18.12 OpenCensusとJaegerで分散トレーシングを見てみよう Scala関西 Summit 2018 Akkaを分散トレーシングで見てみよう 同じネタを別のコミュニティでやるというのはなかなか無いと思ったのでやってみましたが、 それぞれバックグラウンドが違う人にどのようにしたら伝わるのか考えることが出来て、とても勉強になりました。
また、会社からの依頼で登壇したり、社内の勉強会でLTしたりと、会社でも話す機会が増えて、前に立って話すことに慣れてきたのかなと思います。
今後はアウトプットの質にもこだわってやっていけるように、いろいろと試行錯誤してみたいと思います。
今年買ってよかったもの Logicool ロジクール R1000SL
登壇する機会が増えたので購入しましたが、USB type Cで充電出来るのと、PDF, Web, Keynote, Powerpointに対応しているのがとてもありがたかったです。 特に、Jupyter notebookをプレゼン資料として使うようにしているので、これだけでも買ってよかったと思いました。
麻辣ペッパー
Twitterのタイムラインで流れてきて、帰宅途中で購入しました。 中身は「唐辛子、唐山椒、食塩、生姜」と何の変哲もないスパイスですが、教えてもらったとおりに麺類に書けてみたらやみつきになってしまいました。 山椒が好きな自分にはとても相性のいいスパイスでした。</description></item><item><title>Japan Container Days v18.12に参加してきました #containerdaysjp</title><link>https://www.grimrose.org/blog/2018/12/opencensus-scala/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2018/12/opencensus-scala/</guid><description>はじめに この記事は、Scala Advent Calendar 2018 の9日目のエントリーです。
8日目は、@yoshiyoshifujiiさんのAkka gRPCを試してみたでした。
10日目は、@j5ik2oさんです。
準備の期間を含めて約4ヶ月位 census-ecosystem/opencensus-scala に触れていたので振り返りつつ、 Japan Container Daysの参加した感想を書こうかと思います。
Japan Container Days v18.12 https://containerdays.jp/
OpenCensusとJaegerで分散トレーシングを見てみよう スライドは、こちらで公開してあります。
内容としては、Scala関西 Summit 2018へ参加してきました #scala_ks で話した内容からScalaの要素を削って、OpenCensusの内容を増やしました。
段取りを間違えてしまって、デモの時間を減らしてしまうという痛恨のミスを犯してしまったのが心残りです。
OpenCensus Scalaについて census-ecosystem/opencensus-scala
Akka-HTTPで使う前にREADME.mdを見てもらうと、 どうやってRouterからSpanを受け取って、Tracingを組み立てて行くことが出来るかが分かります。
あとは、自分が使いたいExporterの設定をapplication.confで有効にすることで、転送されるようになります。
0.6.1で利用できるExporterは以下のとおりです。
Stackdriver Logging Zipkin Instana 今回紹介したJaegerはZipkinと互換性があるので、転送先をJaegerのCollectorにすることで利用可能になります。
あくまでwrapperなので、census-instrumentation/opencensus-javaが対応していないExporterは、自分でCustom Exporterを作る必要があります。
その際は、Trace exporterを参考にしつつ、 census-instrumentation/opencensus-specsでSpanの中身をみつつ、 利用したいTracingのプロダクトのフォーマットにしていく必要があります。
また、Spanは伝播させる必要があるので、ReaderTのような合成しやすい型と組み合わせて対応するといいと思われます。
import cats.data.ReaderT // or import scalaz.ReaderT type ReaderSpanT[F[_], A] = ReaderT[F, Span[F], A] Module for tagless-final &amp;amp; cats-effectのように、そもそも組み込んでしまうissueも上がっています。</description></item><item><title>ぐるぐるDDDで気をつけてること</title><link>https://www.grimrose.org/blog/2018/12/ddd/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2018/12/ddd/</guid><description>はじめに この記事は、ドメイン駆動設計 Advent Calendar の2日目の記事です。
1日目は、@tanaka9230 さんの 「DDD」にまつわる諸課題の整理でした。
3日目は、@bigwheel さんの 集約の境界と整合性の維持の仕方に悩んで2ヶ月ぐらい結論を出せていない話です。
ぐるぐるDDDとは ぐるぐるDDD で検索すると、@haradakiro さんの資料がみつかると思います。
DDDとScrumを回していくことで、モデリングと実装をしていくやり方です。
ドメイン駆動設計というとどうしても実装の話が多いので、どうやってやっていくと、モデルと実装の乖離を減らしつつ、要求に答えられるシステムを開発出来るのか、 自分が気をつけてることを書きたいと思います。
モデル探求のうずまき https://domainlanguage.com/ddd/whirlpool/
この絵は、端的にシナリオとモデルとコードによる探査をどのように扱うかを表しています。
注目してほしいのが、うずまきがシナリオ、モデル、コードによる探査それぞれにもあるところです。
どうしても大きいうずまきが注目されがちですが、各個のうずまきが回らない、停滞してしまうと前に進めることが出来ません。
気をつけてること 停滞させないように以下のことを気をつけてます。
捨てやすいように設計及び実装する。 シナリオでどんなイベントが発生して、どのような状態になるかを考える。 特に捨てやすいように設計しておくことで、シナリオでモデルを揺さぶったときに変更が生じても影響範囲を特定しやすかったり、 必要なくなった場合はサクッとコードごと消したり、機能フラグを切り替えたりすることで、いつでも消せるようにしておける余裕をもたらすことが可能になります。
また、ストラングラーアプリケーションのように、捨てやすいようにしておくことで、 時間が経過したとしても、フェードアウトしやすいので無駄にヘイトを貯めることが減ります。
何をもって捨てやすいかは、システムの規模や実装言語などによって定義しにくいとは思いますが、ぐるぐるDDDを回す上でタイムボックスを守れる、 長期にわたってもいつでも消せる状態にあるというのは、要素として上げられるのではないかと思います。
あと、ドメインイベントはimmutableであるという制約を元にシナリオを読み解くことで、 リプレイする際にどの時にどの状態になるかということが何度でも確認できたり、 その時のシナリオでは漏れてたであろうドメインイベントを浮かび上がらせることが出来ると思います。
おわりに 今のプロダクトにも技術的負債は残ってますし、捨てやすい設計になっている箇所はまだまだ少ないです。
それでも、自分がこのぐるぐるDDDがあっていると感じるのは、全て携わって業務の理解がそのままコードになっていくことが改善に繋がっていく体験がとても楽しかったからです。
このぐるぐるDDDの無限に続くうずまきが描く軌跡が黄金の回転になる日がいつか来るでしょう。</description></item><item><title>Scala関西 Summit 2018へ参加してきました #scala_ks</title><link>https://www.grimrose.org/blog/2018/11/scala-kansai-summit/</link><pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2018/11/scala-kansai-summit/</guid><description>はじめに https://2018.scala-kansai.org/
https://skug.connpass.com/event/100075/
https://skug.connpass.com/event/99741/
去年のScala関西 Summit 2017に引き続いて、参加してきました。
今回は、2日間の開催ということで、1日目のセッションのCfPが通らなかったら、2日目のアンカンファレンスでなにか出来ればと思っていました。
今回は、Akkaを分散トレーシングで見てみよう というタイトルで、仕事で直面したネタをもとにデモをする内容を考えていました。
Akkaを分散トレーシングで見てみよう https://2018.scala-kansai.org/session/#grimrose
デモで使用したコードは、grimrose/scala-kansai-summit-2018にあります。
CfPが通ったあと、Jaegerについてや、OpenCensusについていろいろと調べ回っていました。
Google Cloud Next &amp;lsquo;18 in Tokyoでは、StackdriverとOpenCensusの開発に携わっている方に、直接質問が出来る機会があってとても助かりました。 その際に教えていただいたのが、以下の動画でした。
その他にも調べていく上で多くのことを知ることが出来ました。
幾つか質問を受けた中で、Akka Streamでも利用出来るのかという話がありました。
もちろんissueは立っているのですが、現在はAkka HTTPのサポートにとどまっています。 なので、自分で頑張るしか無い状況ですが、親となるio.opencensus.trace.Span をどうやってAkka StreamのGraphに乗せるのかが考えどころだと思います。
あと、今回のCfPのきっかけとなったblogの記事がOpenCensus について調べて試したなのですが、 書いた方が質問に来てくださっていろいろ話すことが出来てとても楽しかったです。
Day1 カンファレンス 今回、3トラックでしかもすべてのセッションが面白そうなので、ホントに悩みましたが以下を選びました。
長期的なメンテナンスの必要なScala製システムにおいて気をつけるべきこと circeから学ぶ Generic Programming 入門 ZOZOSUITはScalaで動いてるよ！ Scala-erにも影響ありそうなJavaの現状まとめ DatabricksとSparkではじめる [データ分析/機械学習] 実践入門 Scala でつくる証券会社とスタートアップ 実践GraphQL on Scala どのセッションも興味深いものばかりでしたが、やはり今回一番のパワーワードは、これでしょう。
Scalaも普及期に入り、いろいろな人が使ってみて様々な使われ方がされて、より裾野が広がったように感じました。
Day2 アンカンファレンス 実は、Airframeハンズオンは、やりたい人が多かったらいいなぁ程度の気持ちでネタ出ししたら、思いの外シールがついてて驚きました。</description></item><item><title>JJUG CCC 2018 Springに参加してきました #jjug_ccc</title><link>https://www.grimrose.org/blog/2018/06/jjug-ccc-2018/</link><pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2018/06/jjug-ccc-2018/</guid><description>http://www.java-users.jp/ccc2018spring/
参加したセッション 今回は、午後から参加したので、以下のセッションに参加してきました。
Scala製システムを3年間運用することで起きた様々なことへの対処 Apache Kafkaとストリーム処理 Spring Cloud, Docker &amp;amp; Kubernetes - Lessons Learned in the context of an OSS Project Networks and Types &amp;ndash; Typed Reactive Systems with Akka GKEとgRPCで実装する多言語対応・スケーラブルな内部API Google Dataflow(Java)を使ったビッグデータのバリデーション Javaを書かなくなって以来、そういうセッションをメインに選んできましたが、そういう傾向なのかセッションもJavaだけでなくアプリケーションを取り巻くミドルウェアやインフラ周りの内容が増えて来ましたし、 興味深いセッションが多く、今回は迷いました。
k8sやmicro serviceといった内容が増えてきたことでJavaだけでなく参加者が携わる領域が増えてきているということなんだと思いました。
特にモノリシックなサービスをk8sに載せられるように改善していく事例の紹介はとても勉強になりましたが、しゃべるスピードが早すぎてついていくので精一杯でした。
あとから資料見直してみるととても示唆に富んだいい内容だったので、もっと英語のスキルを上げていければと思いました。
その他のセッションも、普段の開発にも取り入れられそうなものがあったので、試してみたいと思います。
おわりに 今回は、参加者も慣れたのか動線がしっかりしていて、前回よりもさらにスムーズだと感じました。
懇親会も普段会えない人と話することが出来てとても楽しかったです。 いろいろ第一人者から直接聞ける機会は少ないので、懇親会はとてもありがたいです。
JJUGのスタッフの皆様、スポンサーの皆様、講演者の皆様、参加者の皆様、ありがとうございました。</description></item><item><title>Scala Matsuri 2018に参加してきました #ScalaMatsuri</title><link>https://www.grimrose.org/blog/2018/05/scala-matsuri/</link><pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2018/05/scala-matsuri/</guid><description>はじめに ScalaMatsuri
今年もスタッフとして、参加してきました。
担当 今回担当したのは、ほぼWeb周り全般でした。
Web周り 今回も、前年のをベースにしつつ、以下のような改善をしてました。
新たに簡体字と繁体字のトップページに追加 更新コストの削減のためテンプレート化 エラー検知が出来るようにした 特に更新コストの削減のためのテンプレート化は、振り返ってみてやっておいて正解だったと思いました。
トップページは、開催までの告知や、アンカンファレンス当日でのタイムテーブルの表示等で一番変更が加わるので、 変更に関係ない箇所はどんどん切り出してincludeするようにしておきました。
アンカンファレンスのタイムテーブルが去年より早く公開出来たのは、個人的に満足でした。 が、コピペミスで一部のセッションの時間帯を間違えていたので、ミスを減らせるような仕組みにしておく必要がありそうです。
テンプレート化に併せてタイプミスや入力漏れを予め検知出来るようにしたのですが、 jekyllがというよりテンプレートエンジンであるliquidがエラーのメッセージが人に優しくないので、 来年以降は、別の仕組みでなんとか出来るといいかもしれません。
その他にも、当日指摘を受けて会場までの地図をGoogle Mapのに変えたりしてました。
中の人になると指摘を受けるまで気づけなかったりするので、こういった指摘は本当にありがたいです。
typoなどを気づいてPull Requestをくださる方がいらっしゃって、とても助かりました。
ありがとうございました。
来年への改善点ややりたいこと等をまとめておこうとおもいます。
当日 当日は、進行やタイムキーパー等をやっていました。
聞きたいセッションはほぼ聴けたのと、アンカンファレンスでは自分で書いたテーマさ採択されてセッションを受け持つことが出来たので、よかったです。
アンカンファレンスのセッションでは、以下のような内容のをハンガーフライト形式でやってみました。
きっかけとしては、なかなかWebサービスのように外に見えやすいシステムに比べ、外に見えにくい場所にあるシステムなので、 他の人がどうやっているのか興味があったので、出してみました。
私が当初想定したのは、自社の社内向けの業務システムでScalaを使ってる人を対象にしてましたが、 思った以上に受託などで業務システムでScalaを扱っている人が多かったのが、興味深かったです。
終えてみて、各自の体験談や知見を共有出来たので、やってみてよかったのでは無いかと思いました。
拙いファシリテーションでしたが、なんとかタイムボックスを守って終えることが出来ました。
おわりに 遅くなってしまいましたが、ご参加いただいた皆さん、ご協賛いただいたスポンサーの皆さん、そして一緒に尽力してくださったスタッフの皆さん、本当にありがとうございました。</description></item><item><title>BuriKaigi2018 に参加してきました #burikaigi</title><link>https://www.grimrose.org/blog/2018/02/buri-kaigi/</link><pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2018/02/buri-kaigi/</guid><description>はじめに https://toyama-eng.connpass.com/event/72023/
以前から気になっていたので、万難を排して参加することにしました。
今年は、勉強会に参加するならLTまたは発表するのを心がけて行こうと思っているので、 Java + αの延長でLT出来ればいいかと思い、LT枠で参加してました (後で、地元の方がLT枠空いているか確認されていたので、申し訳ないことをしてしまったと思いました)。
Scalaの導入について 発表した内容は、こちら。
https://gist.github.com/grimrose/aacbad883617b025f3300d220e266217
主に、ScalaMatsuri 2018の告知と、Scalaを導入した後の振り返りを話しました。
Scalaをチームに導入した後で、プロダクトコードを任せられる程度に書けるようになるまでは、レビューがどうしても必要になりますし、 Better Javaとしてのコードが多くなるのは避けられないと思います。
確かに関数型プログラミングを駆使したほうがScalaっぽいのは分かりますが、今のプロジェクトではそこまで求められる要件が今のところ少ないので、割り切っている部分もあります。
但し、関数型プログラミングでもOption, Either, Validationのように業務ロジックでは避けられないエラー処理と集約に必須なので、丁寧に教えて使ってもらってます。
社内勉強会も後々のプロダクトコード書くことを見据えて、ハマった時に探す手段や良し悪しを重視しました。
ですので、自分で調べて進んでいけるような人で無ければ、そもそもリソースが足りていない小さいチームでの教育を十分行うには難しいと思います。
そうでないような人は、初めからチームに入れない、採用しない、そういったチームであることを伝えるといった手段を行使しないと上手く運営出来ないというのが、今の認識です。
LTでもVさんのツイートを紹介しましたが、自分たちのような事業会社の小さいエンジニアのチームで、持続可能な開発をしていくための環境づくりをどうして行ったらいいのか。 を考えていくことになりそうなので、いろいろ試行錯誤しながら前に進んで行ければと思います。
鰤 氷見の寒ブリを勉強会の前に楽しんでました。
本番(?)の懇親会では、舟盛りが凄かった。
刺身とブリしゃぶで味が違ったんだけど、確かにそれぞれ美味しかった。
写真を撮り忘れるくらい、どんどんごちそうが出てきて、美味しかった。
富山ブラック 駅のそばで食べられたので、満足です。
おわりに いたせりつくせりだったので、大変だったとは思いますが、BuriKaigiのスタッフの方のサポートが無かったら、ここまで楽しむことが出来なかったと思います。 ありがとうございました。
次回もまた、鰤を学ぶ(食べる)ために、参加したいと思います。</description></item><item><title>2017年の振り返り</title><link>https://www.grimrose.org/blog/2017/12/retrospect/</link><pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2017/12/retrospect/</guid><description>今年も大晦日になったので、振り返ってみたいと思います。
2016年の振り返りは、こちらでした。
やってみたかったことの振り返り また、2017年にやってみたかったことは、以下のように書いてました。
Akkaを使ったシステムへのマイグレーション AWSを活用した運用環境 pythonを使ったシステムの構築及び運用(引き続き) 今年1年で、Scalaでスクラッチで作っていたシステムから、徐々にAkka Streamsに移行しつつ、 新しくAkka HTTPを利用したAPIサーバの開発を行っていました。 その内容については、Scala関西 Summit 2017へ参加してきました #scala_ksにもあるように、 Scala関西で話すことが出来ました。 今後は、コアな業務ロジックをScalaへ集約して、Akka Streamsへ乗せて、より柔軟性と拡張性を持ったシステムへと改善していければと思っています。
AWSを活用した運用環境については、1年間AWSでいろいろなサービスを触って、相談しならがら検証していくことが出来ました。 少しづつではありますが、運用環境に組み込みつつ、運用の負担やコストの削減の効果が実感出来るようになりました。 特にAthenaやAWS Batchについては、自分たちのチームだけにとどまらず活用できそうなサービスではありますので、 知見共有の場を持てるようにしていければと思います。
Pythonを使ったシステムの構築については、幾つか制約や課題があり、なかなか進めることが出来ませんでした。 そこでまずはDockerを使ったCI/CDが出来るようにすることを目標に、PythonでのDocker運用事例やベストプラクティス等を集めて 軌道に乗せたいと思います。
自分のスキルや経験について 2017年12月で転職して3年が経過しました。 自分が関わっているプロジェクトについても、新たなフェーズに移行したことで、 改めて自分が何をやりたいのか、出来るのか、出来ないのか、足りないのか見つめる機会が出来ました。
何かしらのシステムを構成する要素は多岐に渡っていて、全部を把握するのは困難になっています。 自分のスキルはサーバサイドが軸になっていますが、それだけでは今後の新しいシステムを作って行くには足りないと考えています。
まずはインプットの量を増やして、シャワーを浴びるようにいろいろな勉強会やカンファレンスに行ってみました。
振り返って見ると、フロント周りはAngular、Vue.js、クラウド周りは、AWS, GCP, Azureを出来るだけ満遍なく、 DockerについてはKubernetesを中心に、その他にもGraphQLやData Visualizationなど、 自分たちのプロダクトをどうやって持っていくか参考に出来そうなのは、気になったら出ていたような感じでした。 参加するだけでは身につかないので、自分で試したりすることで、勘所を知ったり、自分たちにフィットしているかを検証したりしました。 その甲斐もあり、新しいフェーズに移行するにあたって、いくつか提案することも出来ました。
フルスタックエンジニアというと自分自身懐疑的な印象を持っていますが、 サーバサイドだけにこだわらず、顧客の課題を解決するために自分が何を出来るのか考え、 必要なスキルを身に着けていくことで、結果的にそうなっていくのが望ましいのでは無いかと思います。
2018年にやってみたいこと 2018年でやってみたいこととしては、以下のことをやってみたいと思っています。
Golangを使ったクライアントの開発及び運用 Pythonを使ったシステムの構築及び運用(リベンジ) Alexa Skill or Action on Googleを使ったサービスを作る Golangについては、社内に実際に使ってサービスの運用までしている人たちがいるので、その人達の助けを借りながら、 今の業務フローを円滑にするツールやクライアントを作っているところなので、それを軌道に乗せたいと思います。
Pythonを使ったシステムの構築については、上でも書いたように一つづつこなしていければと思います。
最後のについては、Google HomeとAmazon Echoを購入して自宅で使っているので、何か自分の為だけのを作って見たくなったからです。
おわりに 福岡や関西やいろんなイベントに行って、twitterやblogでしか知らなかった人にお会いすることが出来て、とても楽しかったです。 来年もまたいろんな場所に行っていろんな人とお会い出来るかと思うと、今から楽しみです。
2018年もよろしくお願いします。</description></item><item><title>GraphQLとScala</title><link>https://www.grimrose.org/blog/2017/12/graphql-with-scala/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0900</pubDate><guid>https://www.grimrose.org/blog/2017/12/graphql-with-scala/</guid><description>はじめに この記事は、Scala Advent Calendar 2017の18日目の記事です。
前日は、esploさんによるslick-codegenの利用例と中身の説明でした。
自分たちのプロジェクトでもGraphQLをCQRS(Command Query Responsibility Segregation)のQuery側として利用できないかを確認してみたかったので、 Advent Calendar駆動で調べてみました。
その中で2つ、ScalaとGraphQLに関することを知ることが出来たので紹介します。
Sangriaについて GraphQL Advent Calendar 2017のIntroduction to Sangriaにて紹介しています。
自分たちのプロジェクトではAkka HTTPを利用しているため、そっちのエンドポイントでやっている記事を探していました。
SangriaとAkka HTTP Using Akka HTTP with Sangria as GraphQL backendに詳細な記事がありますので、 そちらを参照してください。 ソースコードは、marioosh/graphql-akka-httpにあります。 Sangria, Akka HTTP, Slick, H2という最小構成で出来ていますので、記事を読みながら試すことが出来ます。
もう少し、複雑なStreamベースなサンプルですと、sangria-graphql/sangria-subscriptions-exampleがあります。 しかし、deprecatedになっている akka.stream.actor.ActorPublisher、akka.stream.actor.ActorSubscriberを使って書かれているため、 今後のActorを使わないAkka Streamsベースのパターンについては、自分たちで考える必要があります。
上記のAkka HTTPの考えと組み合わせることで上手く行きそうですが、検証の時間が足りませんでしたので、今後の課題として引き続きやっていければと思います。
Graphcoolについて Graphcoolは、GraphQLのバックエンドを構築できるサービスです。
Introducing the Graphcool Frameworkの記事でもあるように、 GitHubにOSSとして公開されました。
2017年12月18日時点での最新バージョンは、v0.10.1です。
Graphcool Server にあるように、docker-composeを使ってローカルでも試せるようになっています。
dependencies.scalaを みると、様々なミドルウェアを駆使していることが分かります。
自前でミドルウェアへのアクセスライブラリを作成していたり、ScalaでのGraphQL Clientを作成していたりと、いろいろ勉強になります。
その他のGraphQLのバックエンドのサービスというと、先日発表されたAWS AppSyncの他にも、 Scaphold.ioがあったりします。
バックエンドサービスが何をやっているのか知ることで、自分たちで運用するには何が必要なのか、ツラミ等を知ることが出来るので、 OSSで公開してくれたGraphcoolには感謝しています。
おわりに 出来れば何かしら検証したコードを踏まえつつ説明が出来れば良かったのですが、 知れば知るほど、グラフ構造を持ったオブジェクトとRDBMSの関係、NoSQLの選択、Query側のスケーリング等考えなければいけないことが増えていき、 検証が進まなくなってしまったので、参照記事の紹介ばかりになってしまいました。</description></item><item><title>Introduction to Sangria</title><link>https://www.grimrose.org/blog/2017/12/sangria-graphql/</link><pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2017/12/sangria-graphql/</guid><description>はじめに この記事は、GraphQL Advent Calendar 2017の17日目の記事です。
Sangriaとは 概要 graphql.orgでも紹介されている通り、GraphQLのサーバーサイド実装です。
Sangriaは、幾つかのモジュールによって構成されていますが、おおよそ以下のような分類が可能です。
コア JSONパーサー向けのライブラリ Relay用ライブラリ JSONパーサーに関してなんでこんなにあるんだと他の言語の人は驚くかもしれませんが、 Scalaでは歴史的経緯により様々なJSONパーサーにまつわるライブラリが作られ、そして現在に至っています。
歴史的経緯については、eed3si9n_jaさんのスライドを参考にしてください。
JSONパーサー自体もバックグラウンドで利用する関数型プログラミング向けのライブラリを選択できるようになっているため、バリエーションは様々です。 なので自分たちの好み、チーム事情に応じたライブラリを使うことが多いです。
初め方 2017-12-17時点でのリリースバージョンは、v1.3.3です。
http://sangria-graphql.org/getting-started/
Sangriaを使ってGraphQLを実装する手順は、以下のとおりです。
Schemaの定義 Schemaのチェック Akka HTTPやPlayを使ってGraphQLのエンドポイントを用意すること Define a GraphQL Schema Sangriaでは、Schemaの定義にmacroを用います。
とはいっても、ボイラープレートになりがちな箇所をSangriaがサポートするような形なので、そこまで複雑なことをやっているわけではありません。
Schema Execution Sangriaは、Schemaと、エンドポイントで受け取ったGraphQLのクエリを用いて、 Repository(Schemaにて取得の仕方を記載しておく)から目的に応じてExecutorが処理をします。 その際に、文字列からオブジェクトへ変換するInputUnmarshallerやオブジェクトからJSONへ変換するResultMarshallerを暗黙的に渡して、 必要なオブジェクトをJSONにして返すようにしてくれます。
GraphQLの操作(Query, Mutation, Subscription)に応じて、予めそれぞれSchemaに定義しておきます。
GraphQLのクエリは、QueryParserがASTへ変換します。 ここでは、Scalaのパーサコンビネータではなく、parboiledが使われています。
エンドポイントには、Akka HTTPとPlayを用いる方法が紹介されています。
Akka-http GraphQL Endpoint Play GraphQL Endpoint 他のフレームワークでも、応用は出来ると思いますので、導入も簡単だと思います。
サンプルについて sangria-playground、sangria-relay-playgroundにて公開されています。
どちらもベースとなるフレームワークは、Playが使われています。
ソースコードは、sangria-graphql/sangria-playground、 sangria-graphql/sangria-relay-playgroundで公開されているので、 サクッとローカルでも立ち上げることが可能です。
どちらも、graphiqlが導入されているので、簡単に試すことが出来ます。
触ってみて サンプルに出てくるProductRepo等のオブジェクトの集まりであるコンテキストをどうやって実装するか、 サーバーサイドが注力すべき場所になるように、Sangriaがある程度お膳立てをしてくれているように感じました。
特にグラフ構造を持つようなコンテキストでは、グラフ構造が得意ではないRDBMSを操作するのは、正直厳しいように思えます。 他の言語のサーバーサイド実装の事情がよく分かっていないので、このような問題をどうやって解決しているのか気になるところではあります。
個人的には、Infinispan、Apache Geode、Apache IgniteやHazelcastといった、 In-Memory Data Gridのようなものと組み合わせて、オブジェクトをそのままメモリで扱いながら、CQRS(Command Query Responsibility Segregation)と上手く組み合わせて行くのが現状なのではないかと考えています。</description></item><item><title>#現場で役立つシステム設計の原則 の読書会をしました</title><link>https://www.grimrose.org/blog/2017/12/principal-of-the-system-architecture/</link><pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2017/12/principal-of-the-system-architecture/</guid><description>はじめに 現場で役立つシステム設計の原則 〜変更を楽で安全にするオブジェクト指向の実践技法 を使って、中途入社の研修として読書会をしました。
11月中に終わったので、まとめておこうと思います。
やってたこと 参加者は私と中途入社の2人だけに限定して、毎日空いている1時間を見つけて開催してました。 進め方は、電子版のpdfをモニタに映しつつ、1時間で進められるとこまで進めていくようにしました。
第1章　小さくまとめてわかりやすくする 第2章　場合分けのロジックを整理する 第3章　業務ロジックをわかりやすく整理する コードのサンプルがJavaだったので、Scalaだとこう書けるよとか、PHPだとこれが出来ないからツライとか、プロダクションコードがこうなっているのはこの考えだからだよとか、実際のコードを見ながら説明をしていたりしてました。
第4章　ドメインモデルの考え方で設計する 第5章　アプリケーション機能を組み立てる ドメインオブジェクトを成長させていくには、業務理解と併せてやっていかないといけないから、分析、設計、開発が別れてるようなプロジェクトだと無理だけど、今のプロジェクトはそうじゃないんだよということも伝えていました。
また、プロダクションコードでイケてない部分も見せながら、この考えを参考にしながら改善していきたいというのも併せて伝えました。
第6章　データベースの設計とドメインオブジェクト データ分析の部署なので、データベースに関する箇所を厚くしたら、盛り込みすぎてしまいました。
紹介したのは、以下の資料です。
イミュータブルデータモデルや有効時間データモデルについては、実際にプロダクションで採用するとこうなるんだよという例を見せながら説明すると、納得していたように見えました。
CQRS + ESについては、少なくともCommandとQueryを分けると責務もはっきりするし、参照が多いレポジトリのクラスがいろいろ巻き込んで肥大化するのを避けることが出来るという自分の考えも伝えていました。
第7章　画面とドメインオブジェクトの設計を連動させる 第8章　アプリケーション間の連携 プレゼンテーション層については、今のプロダクションコードを見つつ、PHPのテンプレートに埋め込む部分と、Angular側に任せる部分と、APIとして何をレスポンスを返すのがいいかを、過去の経緯と今の考えを踏まえつつ説明してました。
RESTをどこまで厳密にやるのが今のプロジェクトにあってるのか、あってるとしたらどのドメインのコンテキストなのかを一緒に考えながら、話し合っていました。
興味を持っているGraphQLについてや、Akkaだとメッセージ基盤も内包してることを紹介してたりしてました。
第9章　オブジェクト指向の開発プロセス SIerあるあるネタがお互いに出てきたので、どこも今もあんま変わってないんだなと思いました。
第10章　オブジェクト指向設計の学び方と教え方 オブジェクト指向エクササイズについては、麻疹にかかるように一度やり過ぎるくらいにやってから、現場でどこまで適用するのがいいのか考える必要があることを伝えていました。
最後の回では、「現場で役立つシステム設計の原則」批判 (1) ～何のために、「データとロジックを一体に」するのか？～ や「現場で役立つシステム設計の原則」批判 (2) ～ポリモーフィズムは何のために？～ を紹介しつつ、プロダクションコードの中の似たような箇所を見せつつ、どうしたらいいか自分なりの考えを出してもらいました。
おわりに 今のプロダクションコードを見ながら、この本で指摘されている内容と照らし合わせていくと、 自分自身の振り返りも出来たので、こういった機会を定期的に設けるのはありなのかもしれないと思いました。</description></item><item><title>JJUG CCC 2017 Fallに参加してきました #jjug_ccc</title><link>https://www.grimrose.org/blog/2017/11/jjug-ccc-2017/</link><pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2017/11/jjug-ccc-2017/</guid><description>http://www.java-users.jp/ccc2017fall/
参加したセッション 今回は、午後から参加したので、以下のセッションに参加してきました。
モブプロで実施する Cognitive Service &amp;amp; Bot ハッカソン #2 ゴールドマン・サックスにおけるCamundaを用いたビジネスプロセスの可視化とワークフローの自動化 Spring BootとKafkaでCQRSなアプリを動かしてみる Java でつくる本格形態素解析器 今回は、Java以外で面白そうなのと仕事で使えそうなのを選んでみました。
特に一番印象深かったのCQRSの話でした。
実際にCQRSが使ったほうがいい課題があるのですが、CQRSを全く知らない人にどうやって伝えたらいいのか考えてました。
その後に、公開された資料を元に自分たちの課題を題材に、いろいろ議論しながらモブプロ出来たらいいなぁとふわふわ考えてました。
アンカンファレンスで話したこと 今回、JJUGでアンカンファレンスが実施されるとのことなので、ScalaMatsuri 2018の宣伝をしてきました。
「コミュニティの宣伝でもいい？」と相談してみたところ、良い返事がいただけたので、「ScalaMatsuriへのお誘い」ということで出したところ採択されました。
15:45からの回に決まったので、話す内容はScalaMatsuriの宣伝で、今年の新しい試みであるScalaMatsuri Tranining Dayの紹介をしようと考えてました。
実際は、「仕事のやりがい、コミュニティについて」という括りの中でいろいろディスカッションする感じでした。 なので、内容もちょっと変えて、私が知っている範囲ではありますが、Scalaのコミュニティへ参加している人たちの変遷や、 ScalaMatsuriが公開している資料を元にコミュニティやカンファレンスに参加している人たちの変遷や、 コミュニティそのものの成熟度合いとの関係を話しました。
上手く伝えられたかは実感が無かったのでどこまで宣伝できたか分かりませんが、JJUG CCCに参加している人たちの働いている環境について知る機会が出来たのは、とても良かったです。
おわりに 今回は、懇親会ではtwitterで知り合った人といろいろ話せたのでよかったです。
ユーザの導線も上手く誘導できているように感じたので、前回に比べて移動とかが楽になっていたように感じました。
JJUGのスタッフの皆様、スポンサーの皆様、講演者の皆様、参加者の皆様、ありがとうございました。</description></item><item><title>Scala関西 Summit 2017へ参加してきました #scala_ks</title><link>https://www.grimrose.org/blog/2017/09/scala-kansai-summit/</link><pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2017/09/scala-kansai-summit/</guid><description>はじめに http://summit.scala-kansai.org/
https://skug.connpass.com/event/62304/
去年のScala関西 Summit 2016に参加してまた参加したいと思っていました。
そんな折CfPを受け付けていたので応募したところ受かったので、これまでやってきたことをまとめるいい機会でしたので、発表してきました。
Akka Streamsへ移行しとるんやけどちょっと聞いてや スライド
発表してきたのは、これまでのプロジェクトでやってきたことと、Akka Streamsをプロジェクトの途中から導入したことで何を考えたのかです。
幾つか質問を受けていて、その中で出てきたAlpakkaですが、まだakka-stream-alpakka-csvだけ導入していて、akka-stream-alpakka-s3を含めその他のモジュールについてはまだ検証中です。 モジュールによっても開発中だったりするので、ハマりどころもあります。
初期に導入したScalikeJDBC + SkinnyORMのデータ取り込み処理については、現在のところ他のバッチ処理の優先順位が高く、Akka Streamsの移行対象になってません。
今回紹介した制約ですが、既存の処理をどうやってAkka Streamsへ繋げるか、移行していくかという課題を元に考えたものなので、これを推奨しているわけではありません。
自分の発表の前にAkka Streamsのセッションが並んでいて、スタッフのタイムテーブルの組み方に助けていただいたと思っています。 おかげさまで説明や資料については、このセッションに来るくらいだから前のも来てるだろうという前提で作ることが出来ました。
失敗したなと思ったのは、本番になると緊張して早口になってしまったのと、 それを緩和するために予めスライドにあと何分かを知れるのを仕込んでいたのにもかかわらず、上手く活用出来ず、予想よりも早く終わってしまったことでした。
セッション 今回参加したの以下のセッションです。
ユーザーデータ基盤を１からScalaでつくった話し Scala and Akka apps on Kubernetes in ChatWork Scala の Functional Programming を支える技術 Scala on Docker(AWS ECS) グラフを知って理解するAkka Stream 「Scale with Scala」の道程 Scala on JVM をプロファイリングするツールの紹介 Property Based Testingでドメインロジックをテストする 今回一番印象的だったセッションは、ユーザデータ基盤についての話でした。 今関わっているプロジェクトの未来にも繋がる話だったり、周りを巻き込んでの検証をすすめていく方法など大変参考になりました。
トラック数の関係で参加出来なかったセッションも、Twitterのタイムラインを見ていると聞きたかった話ばかりでした。
資料をまとめてくださっていたので、見返しておきたいと思います。
Scala関西 Summit 2017で公開された資料へのリンク集
おわりに 前日は、スポンサーでもある燻製と地ビール　和知で呑むために京都へ前乗りしました。
翌日は、桃ヴァイツェンを呑むためにビアベリー天満へ行ってきました。</description></item><item><title>Scala福岡2017に参加してきました #scalafukuoka</title><link>https://www.grimrose.org/blog/2017/08/scala-fukuoka-2017/</link><pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2017/08/scala-fukuoka-2017/</guid><description>はじめに https://scala.connpass.com/event/57941/
前回のScala福岡が楽しそうだったのと、 福岡に自分の足で行ったことがなかったので、参加してきました。
セッション Play2 Scalaのハンズオンは、一度もやったことがなかったので、今回はいい機会だと思いそちらを選択しました。
ハンズオンの準備が完了していなくて、IntelliJへのインポートと依存関係のダウンロードに時間が取られてしまいましたが、 最後まで進めることが出来ました。
ハンズオンの資料が最後まで進められるように出来ていて助かりました。
その後は、ずっと同じ部屋で以下のセッションを聴いてました。
Akkaちゃんと遊ぼう！ Akka Streams で作るリアルタイムサーバ Backlog が一体いつから Scala を遣っていないと錯覚していた？ ~Java から Scala への移行~ Akka Streamsの話は、仕事でも使っているので身近に感じたのと、ビデオチャットが作れるのを見て、もっと勉強しなきゃと感じました。
Scalaへの移行についても、仕事でPHPからScalaへ移行している途中なので、移行戦略についてとても勉強になりました。
LTとparadox LTでlightbend/paradoxの導入について話してみました。
資料は、https://grimrose.github.io/scala-fukuoka-2017です。
併せて、レポジトリはgrimrose/scala-fukuoka-2017です。
資料は、paradoxで作ってみました。
きっかけとしては、Akkaのドキュメントを読みながら仕事をしていて、Akka HTTPのレイアウトが他のドキュメントと違っていて興味があったからです。
あとは、ドキュメントを残す際にREADMEだけではうまく説明出来なくなってきたりしたので、Gitlab Pagesでも使えるようなmarkdownをhtmlに出来るツールを探していました。
今回のLTに向けて検証してみて、十分使えそうだと思えたので、実際に導入してみたいと思いました。
おわりに 懇親会では、福岡の方々や自分と同様に県外から参加された人たちとScalaの話だけでなくいろいろな話が出来て楽しかったです。
また、来年行きたいと思います。
会場を提供してくださった株式会社ヌーラボさん、スポンサーの皆様、参加者の皆様、ありがとうございました。</description></item><item><title>JJUG CCC 2017 Springに参加してきました #jjug_ccc</title><link>https://www.grimrose.org/blog/2017/05/jjug-ccc-2017/</link><pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2017/05/jjug-ccc-2017/</guid><description>http://www.java-users.jp/ccc2017spring/
参加したセッション 今回参加したセッションは、以下のとおりです。
Java libraries you can&amp;rsquo;t afford to miss Unified JVM Logging: Java 9 から変わる JVM ログ 今日からDL4J グラフデータベース入門 Engineers can change the world ～ &amp;ldquo;世界&amp;rdquo; で活躍するエンジニアになるために Ordinary Object Pointer について調べてみた 今回は、業務で使うJVMに関する内容や使いそうなグラフデータベースやDL4J、英語を聞く機会を増やしたいと思ったので、このリストになりました。
他のセッションも興味深かったり、被ってさえいなければ聞きたかったのもあったので、ここ数年、JJUG-CCCのセッション選びはホントに悩ましいです。
今回一番印象に残ったセッションは、「Engineers can change the world ～ &amp;ldquo;世界&amp;rdquo; で活躍するエンジニアになるために」で、Microsoftに移られた寺田さんと上司である Drew Robbinsさんの働き方についての内容でした。
人材紹介のドメインで業務をしていると、求職している人の働き方や考え方、企業自体がどういった人が求めているのかを着目するようになってきました。
その中でもソフトウェアエンジニアは、自分の職業の一つでもあるので、他の企業の、しかも日本ではなく世界に同じ職種を抱えている人の話を聞くのはとても興味深かったです。
最後にビデオを見る機会があったのですが、昔はSFの話だと思っていたことが、実はコードで実現出来るかもしれない未来がそこまで来ているのを見せられたので、とても印象に残ってました。
おわりに 懇親会では、twitterでしか知っていなかった人たちにご挨拶出来てよかったです。
1000人規模のカンファレンスになってしまい、いろいろと課題点とか見えているみたいですが、 以前に比べて裾野が広がっているように思えるので、ぜひよりよい結果に繋がるようになって欲しいと思います。
JJUGのスタッフの皆様、スポンサーの皆様、講演者の皆様、参加者の皆様、ありがとうございました。</description></item><item><title>Scala Matsuri 2017に参加してきました #ScalaMatsuri</title><link>https://www.grimrose.org/blog/2017/05/scala-matsuri/</link><pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2017/05/scala-matsuri/</guid><description>はじめに ScalaMatsuri
今年もスタッフとして、参加してきました。
ブログを書こうとしてましたが、なかなか踏み出せていなかったのでScala将軍達の後の祭り2017のLTに応募して、 LT駆動でなんとか思い出しながら書いてみました。
担当 担当したのは以下の内容でした。
Web周り 海外スピーカー向けのホテル予約 配信周りの調整 web周り Web周りは、上記のURLに表示するためのコンテンツをGithubで管理していて、スポンサーのロゴや原稿、タイムテーブル等、必要に応じて変更がPull Requestとして上がってくるので、パス等の確認をしてmergeボタンを押してました。
デプロイはtravis ciが、デプロイ先はGithub pagesなので、デプロイされたらslackに通知が来るので、違和感や位置ずれが無いか確認してました。
時々、typoなどを気づいてPull Requestをくださる方がいらっしゃってとても助かりました。
海外スピーカー向けのホテル予約 ホテルの団体予約とか普段の生活では全くやる機会がなかったのですが、前年の担当の方が資料を残してくださったお陰で手順や反省点を踏まえて始めました。
海外スピーカーに向けてのアナウンスや連絡については、翻訳チームと協力して行い、無事完了することが出来ました。
配信周りの調整 AbemaTV Developer Conference 2016に参加した祭に、Tech Conferenceでのカンファレンスの動画の配信について問い合わせを受け付けているとお話を伺っていたので、ScalaMatsuriの運営スタッフで話し合った結果、お願いすることになりました。
当日は、ネットワークの不調等も重なってしまい、お見苦しい点もあり申し訳ありませんでした。次回以降の反省点として共有しておきます。
当日 当日は、進行やタイムキーパーをやっていました。 スタッフをやっていると聞きたいセッションを聞けるというのはなかなか実現されないことが多いと思われがちですが、調整することが出来ます。 今回は進行とタイムキーパーのセッションが聞いてみたかったのに割り振られていて調整する手間が省けてよかったです。
おわりに ScalaMatsuriの初社員採用プロジェクト これまでの運営の失敗と成功の歴史 ~ScalaMatsuri 2017を振り返って~で紹介されている社員の方がいて下さったおかげで、 前回に比べて情報共有や交通整理がされるようになりました。
また、ScalaMatsuri2017（スタッフ）打ち上げの前に、振り返りの機会を設けて今回の反省点を共有して、次回に繋げることが出来ました。
遅くなってしまいましたが、ご参加いただいた皆さん、ご協賛いただいたスポンサーの皆さん、そして一緒に尽力してくださったスタッフの皆さん、本当にありがとうございました。</description></item><item><title>JVMからSSHのポート転送でJDBC接続する</title><link>https://www.grimrose.org/blog/2017/04/ssh-port-forward/</link><pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2017/04/ssh-port-forward/</guid><description>はじめに 仕事上、windowsの端末からリモートのlinuxのDBにデータを送る必要があったのですが、 GUIでの手作業はしんどいので、簡単なツールを作ることにしました。
幸いなことにJVMが入っているので、JavaのSSHクライアントとJDBCを使ってやってみました。
検証 grimrose/ssh-port-forward-study
対象のサーバは、模擬的にDockerで作りました。
使用した言語は、慣れているgroovyと仕事で使ってるscala、ライブラリは、以下の通り。
groovy groovy-ssh groovy-sql scala dacr/jassh ScalikeJDBC どちらのSSHクライアントもJSchをベースにしているのですが、Javaで書くよりだいぶ楽になっています。
SSHからリモートのコマンドやシェルスクリプトを動作させたり、実行結果の文字列やexit codeを受け取って更に次に繋げられるようになっていたり、 その他にもsftpやいろいろコマンドが用意されているみたいなので、デプロイツールとしてやミドルウェアの検証にも使えそうです。
おわりに windowsという制約はちょっとしたツールを作るだけでもホントにしんどいので、JVMがあってよかったと思ってます。
JVMやその他の言語でもランタイムをwindowsで動かせるようにしている人たちに感謝しつつ、日々の業務を楽にしていきたいと思います。</description></item><item><title>2016年の振り返り</title><link>https://www.grimrose.org/blog/2016/12/retrospect/</link><pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2016/12/retrospect/</guid><description>2016年の振り返り 今年も大晦日になったので、振り返ってみたいと思います。
2015年の振り返りは、こちらでした。
やってみたかったことの振り返り また、2016年にやってみたかったことは転職して１年が経ちました。に以下のように書いてました。
Akka Streamの導入 Kubernetesを用いたDocker Clusterの導入 electronを使った業務アプリの継続的開発 pythonを使ったシステムの構築及び運用 In-memory Data Gridを活用した機能の検証 Akka Streamは、ScalaMatsuri 2016から、Akkaにまつわる読書会や勉強会に参加するようになってから、 プロジェクトに導入するために必要な知識や考え方等を学んできて、12月からようやく導入に踏み切りました。
Kubernetesについては、本格導入に向けて試験的に検証運用をしていますが、マネージドではなく自分たちで運用するとなると、 バージョンアップについていくのがとても大変でした。
electronを使った業務アプリについては、Excel VBAを代替するには大げさすぎる規模の案件が多かったため、なかなか出来ませんでした。
pythonを使ったシステムの構築及び運用については、全く出来なかったので、今年のPyconJP2016で知ったerrbotを使ったbot運用をやってみたいと思います。
In-memory Data Gridのプロダクトとしてhazelcastを使ってみましたが、 今使っている規模だとなかなかClusterが必要な規模で検証することが出来ませんでした。
やってみたかったことのほとんどについて、なんらかの形で動かすことが出来たのでとても充実してました。
2017年やりたいこと 2017年でやってみたいこととしては、以下のことをやってみたいと思っています。
Akkaを使ったシステムへのマイグレーション AWSを活用した運用環境 pythonを使ったシステムの構築及び運用(引き続き) 既存のScalaで作ってたプロダクトを徐々にAkka、Akka Streamを使ったものに変えていこうと思っています。 そのためにもチームのメンバーにAkkaを使った開発について教育や共有を出来るようにしていければと考えてます。
AWSについては、ようやく本格的に利用できるようになったので、これまで自前で運用していたものをマネージドなサービスに移行したり、 利用したいと思っていたサービスを使うことが出来るようになりました。
チームとして動きやすくするための環境を整えることが多くなると思いますが、新しいことに挑戦したり、やりたいことが出来る環境は引き続き維持したいと思います。
2017年もよろしくお願いします。</description></item><item><title>ErgoDoxのキーキャップを注文してみました</title><link>https://www.grimrose.org/blog/2016/12/ergodox/</link><pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2016/12/ergodox/</guid><description>はじめに この記事は、ErgoDox Advent Calendar 2016の23日目のエントリです。
キーキャップについて okapiesさんのErgoDox EZ カスタマイズ情報のまとめの キーキャップの箇所をみていただければ、だいたいどういったものがあって、どこで買えるのかが参考になると思います。
今回は、2つ紹介されているサイトのうち、WASD Keyboardsで注文した過程を紹介したいと思います。
WASD Keyboardsでの注文の仕方 今回欲しかったのは、10キーのキーキャップです。 商品ページはこちら。
支払いは、PayPalが使えるので、アカウント用意しておくと楽に決済できると思います。
送り先の住所もあらかじめPayPalに海外向けの住所を登録しておけば、注文時のフォームに引っ張ってきてくれます。
今回注文したのは、2016年12月9日でした。
配送業者は、UPS Worldwide Saverを選択しました。 理由としては、ネタとしてLOSTしたことを書くのも面白いとは思いますが、安いとは言えLOSTされるのは困るので多少高いですがちゃんと届くのを重視しました。
配送業者が配送開始になったのは、2016年12月13日でした。 その週はアメリカでの雪の影響があったため、幾日か遅延の情報がUPSの配送状況から知ることが出来ました。 とは言え、日本に到着したのは、2016年12月15日でした。
どうしても、早く欲しいのであれば、UPS Worldwide Saverを選択するのはありではないかと思います。
装着 装着した結果、こんな感じになっています。
写真は、あのErgoDox users meet upが行われたイベント＆コミュニティスペース dots.で撮りました。
あのイベントの数日後には、ErgoDox EZのサイトで注文してました。
それ以降、仕事場に持ち込んでずっと使っています。
おわりに 年明けあたりに、okapiesさんが紹介されていたもう一つのPimp my keyboardで注文してみたいともいます。
ErgoDoxはカスタマイズが出来る箇所が多いのですが、日本で手に入れるのが難しいものがあります。 とはいえ、以前に比べてだいぶ敷居が下がってきますし、ErgoDox購入出来る人であれば大丈夫だと思います。
今後もErgoDoxを楽しんでカスタマイズしていこうと思います。</description></item><item><title>Mithril.jsをTypescript2.xで書いてみよう</title><link>https://www.grimrose.org/blog/2016/12/mithril/</link><pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2016/12/mithril/</guid><description>はじめに この記事は、Mithril.js Advent Calendar 2016の18日目のエントリです。
17日目 &amp;gt; shibukawaさんのMithrilで自動補完つきテキストを作る(2)です。
19日目 &amp;gt; tacnomaさんのMithrilからRailsサーバーへのファイルアップロードではまった部分です。
@type/mithriljs Mithril.jsでTypeScriptを使う場合、以前であれば、typingsで型定義ファイルを取得する必要がありましたが、 TypeScript2.0からは、npmの@types/mithrilで取得できるようになりましたので、
npm install @types/mithril -D で、他の依存と同じように管理できるようになったことでだいぶ楽になりました。
書いてみた grimrose/grimrose.github.io
以前から書いていたのを、今回のエントリを書くにあたり、いろいろ機能追加やバージョンアップをしました。
Mithril.jsでTypeScriptを使うときの特徴としては、やはり型の制約が出てくるところです。
特にm.requestで返ってくるのが、Mithril.Promise&amp;lt;any&amp;gt;になるので、そのままではTypeScriptの世界にanyをばらまいてしまうので、 クラスを用意しマッピングする必要があります。 さらに、JavaScriptでは使えていたmapなどのメソッドが使えないので、m.deferredを駆使して、Promiseの世界でやりとりする必要があります。
また、ComponentがControllerを要求するので、クラスを作るかinterfaceをキャストしてあげる必要があります。
その他にも、いろいろと型を合わせる必要が出てくるので、ひたすらTypeScript compilerの指摘を受けつつ試行錯誤することになると思います。
新しくTypeScript 2.0で使えるようになった機能は、今後勉強も兼ねて書き直していければと思ってます。
いろいろ依存関係をバージョンアップする関係で、yarnpkgで依存管理をするようにしました。 デプロイには、CircleCIを利用していますのでCircleCIでyarnを使うを参考にさせていただきました。
おわりに 普段の業務では、AngularJS + TypeScriptをメインで書くことが多いのですが、 やはり覚えることが多いのと、JavaScriptが前提になっている記事やコードをTypeScriptへ変換するにはどうしたら良いのかを考える必要が出てきてしまうので、 学習に時間がかかりますね。
その点、Mithril.jsははじめに覚えるAPIの少なさと、そこから深く学ぶには何が必要なのかが全て公式に揃っているのが、とてもありがたいです。 特に日本語のサイトが、公式に追従してくださっているお陰で、敷居がだいぶ下がっていると思います。
次の1.xはより洗練されたものになると思いますので、とても楽しみです。</description></item><item><title>ScalikeJDBCを使ってAmazon Athenaへアクセスしてみた</title><link>https://www.grimrose.org/blog/2016/12/scala-advent-calendar-2016/</link><pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2016/12/scala-advent-calendar-2016/</guid><description>はじめに この記事は、Scala Advent Calendar 2016の11日目のエントリです。
10日目 &amp;gt; ponkotuyさんのSkinnyORMのjoin定義についてです。
12日目 &amp;gt; aoiroaoinoさんのScala関西 Summit 2016 で Lens/Prism について発表してきたです。
ScalikeJDBCについて ScalikeJDBCは、SQLを使ってDBにアクセスしたい場合にとても使いやすいライブラリです。
Amazon Athenaについて AWS re:Invent 2016で発表された新しいサービスです。
詳細については、 Amazon Athena – Amazon S3上のデータに対話的にSQLクエリを や、AthenaのJDBCドライバを使ってS3のデータにSQL Workbench経由でアクセスする #reinvent #athena を見ていただければと思います。
S3に保存したデータに対してスキーマを定義してSQLでアクセスできるようになるのは、今後の自分の仕事にもつながってくるサービスでもあるので注目しています。
アクセスしてみた 検証したサンプルコードはこちらです。
grimrose/Scala-Advent-Calendar-2016
まずはじめに遭遇したのは、auto commitが常にONにするのが想定されているということでした。
遭遇した例外は、以下のような内容でした。
Exception encountered when invoking run on a nested suite - Failed to initialize pool: Disabling auto-commit mode not supported com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Disabling auto-commit mode not supported 仕方ないので、以下のようにして、auto commitをtrueへ変えました。</description></item><item><title>GParsのActorでアクターモデルに入門する</title><link>https://www.grimrose.org/blog/2016/12/gadvent-2016/</link><pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2016/12/gadvent-2016/</guid><description>はじめに この記事は、G*Advent Calendar(Groovy,Grails,Gradle,Spock&amp;hellip;) Advent Calendar 2016の10日目のエントリです。
9日目 &amp;gt; nobeansさんのGrailsでUnix/Linux的実行可能WARファイルをつくるです。
11日目 &amp;gt; tyamaさんのGrailsでServer Sent Eventsを送信！(意訳版)です。
GParsとは GParsは、GroovyとJavaで利用できる並行・並列処理を利用しやすくなるライブラリです。
[Groovy]GParsで並列処理（基本＆コレクション編）を見ていただくと、 旧来のThreadや、java.util.concurrentをそのまま使うよりも並行処理が書きやすそうだと感じたのではないでしょうか。
GroovyがApacheに寄贈され、codehausが停止してしまったため、ソースコードやドキュメントがgithubに移管されています。
GPars/GPars
versionは、1.2.1のままです。
ですので、Gradleで利用する際は、以下のように依存を追加すれば利用できるようになります。
// https://mvnrepository.com/artifact/org.codehaus.gpars/gpars compile group: &amp;#39;org.codehaus.gpars&amp;#39;, name: &amp;#39;gpars&amp;#39;, version: &amp;#39;1.2.1&amp;#39; Actorモデルについて アクターモデルについては、アクターモデルを見てください。
アクターモデルの実装されているもので代表的なものは、ErlangとAkkaが挙げられます。
この2つについては、もうエコシステムとも呼べるようなものになってしまっているので、アクターモデルだけを知ろうとすると、どこから手をつけていいのか分かりにくくなります。
そこで、GParsのActorを使ってアクターモデルの考え方を理解して行こうと思います。
GParsのActor GParsのActorのドキュメントを見ると、Actorの作り方はとてもシンプルです。
import groovyx.gpars.actor.Actor def actor = Actors.actor { loop { react { msg -&amp;gt; println &amp;#34;Received: $msg&amp;#34; } } } actor.send &amp;#39;Hello, GPars!&amp;#39; actor.join() // 停止するまで立ち上がったままにする。 // 止めるときはCtrl-C or プロセスを落とす いわゆるPingPongをする場合はこんな感じです。
@Immutable class PingMessage { String message } @Immutable class PongMessage { String message } @Log class PongActor extends DefaultActor { @Override protected void act() { loop { react { msg -&amp;gt; log.</description></item><item><title>MacBook Pro (13-inch, Late 2016, Two Thunderbolt 3 ports)とDELL P2715Q</title><link>https://www.grimrose.org/blog/2016/12/mbp-13-late-2016/</link><pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2016/12/mbp-13-late-2016/</guid><description>はじめに MacBook Pro (13-inch, Late 2016, Two Thunderbolt 3 ports)モデルを購入したので、 4KモニタのP2715Qとの動作検証を残しておこうと思います。
MacBook Pro 13 Late 2016 non-Touch Bar カスタマイズは、以下の通り。
2.4 GHz Intel Core i7 16 GB 1867 MHz LPDDR3 512GB SSD DELL P2715Q ここを見ると4K 60Hzで表示するには、HDMI 2.0かDisplay Portのモニタが必要です。
しかし、HDMI 2.0の選択肢が無さすぎたので、Display Portで4K 60Hzを表示できるモニタから、DELL P2715Qを購入しました。 理由は、価格と店頭での印象でした。
MacBook ProとDisplay Portのモニタを接続するアダプタとして、AUKEY USB-C to DisplayPort Adapter CB-C42を購入しました。
P2715QにはminiDP - DisplayPortのケーブルが付属しているので、必要になればDisplay Port - DisplayPortのケーブルを買おうと思い、モニタが届くのを待ってました。
接続は、こんな感じで出来ました。
[MacBook Pro] &amp;lt;&amp;ndash; [CB-C42] &amp;lt;&amp;ndash; [DisplayPort - miniDP] &amp;ndash;&amp;gt; [P2715Q]</description></item><item><title>JJUG CCC 2016 Fallに参加してきました #jjug_ccc</title><link>https://www.grimrose.org/blog/2016/12/jjug-ccc-2016/</link><pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2016/12/jjug-ccc-2016/</guid><description>http://www.java-users.jp/ccc2016fall/
参加したセッション 今回参加したセッションは、以下のとおりです。
SIerもはじめる、わたしたちのDevOps 先取り Elasticsearch 5.0 ハンズオン！ JVMのトラブル解決のためにやったこと~メモリー/スレッド Spring Cloudアプリケーションの開発にDockerを活用し、Kubernetes上にデプロイするまで Featherweight JavaやGroovyの漸進的型付けについて 今回は、仕事でElasticsearchを検証している際に入門的なものを知らないと先に進めなさそうと感じたので、ハンズオンを優先的に選択しました。
その他のセッションについては、Javaのセッションよりも仕事で使うJVMやkubernetesに関するものや、数少ないGroovyのセッションを選んでみました。
寝坊してしまったため、午前の基調講演とそのあとのセッションの一部を聞けず、流れてくるTwitterを見ながら早く聞いて見たいと思ってました。
途中からでしたが、顧客が社内の人達ということで、自分の今の環境と照らし合わせて聞いていました。
裏でいろいろ教育や環境を整えているかわしまさんのスゴさを改めて知ることが出来たのと、その教えを忠実に守って継続していくしょぼちむさんのチームが素晴らしかったです。
R&amp;amp;D部門の阿佐さんのDockerのオーケストレーションの話がとても興味深かったです。まさか資料がkubernetesで動いてるとは思いませんでした。
Elasticsearchのハンズオンは、特にkibanaあたりの内容が足りていなかった自分にとって勉強になりました。
JVMのトラブルシューティングについては、初心者向けだったのか、JVMの基本的な概要とトラブルシューティングのツールの説明が主でした。 なのでちょっと物足りなく感じましたが、JJUG CCCの参加者の多くが初めての人が多いことを考えれば、仕方ないと思います。
Spring Cloudの他のセッションをあらかじめ聞いておけば良かったと思えるほど、Spring CloudとKubernetesを連携させて動かすことができる環境を用意できるfabric8が凄かった印象でした。 Kubernetesの設定ファイルとかその他の設定もよしなにしてくれるpluginがMavenしか最新版が無いのが本当に
Featherweight JavaはJava基礎勉強会の時に説明されていたので、ある程度覚えていましたが論文自体を全部読んでいなかったので丁寧に説明してくださって助かりました。 @TypeCheckedや@CompileStaticをそういう使い方もできるのかとGroovyの奥深さを新たに知ることが出来ました。
おわりに 懇親会は、初めの方だけ参加させていただきましたが、いろいろな方とお話しできて良かったです。 次回のJJUG CCCで時間の都合でご挨拶できなかった方にお会いしたいと思ってますので、よろしくお願いします。
JJUGのスタッフの皆様、スポンサーの皆様、講演者の皆様、参加者の皆様、ありがとうございました。</description></item><item><title>転職して2年が経ちました。</title><link>https://www.grimrose.org/blog/2016/12/curriculum-vitae/</link><pubDate>Thu, 01 Dec 2016 00:00:00 +0900</pubDate><guid>https://www.grimrose.org/blog/2016/12/curriculum-vitae/</guid><description>はじめに 2014年12月に転職してから2年経ったので、振り返ってみました。
1年前はこちら。
引き続き、データ分析チームのエンジニアとして働いてます。
職務経歴書のOSS化 職務経歴書OSS化を見て、ちょうどいい機会だと思ったので、作ってみました。
職務経歴書はこちらです -&amp;gt; grimrose/Curriculum-Vitae
前職の案件については、転職時に作成した資料を元にぼかして書きました。
おわりに 今のところ、転職する意思はありませんが、転職のきっかけとなった方が新天地へ飛び立って行かれたので、 自分が今の会社で何を成したいのかを考えるいいきっかけだと感じました。
久しぶりにスキル周りの見直しや転職時に作った資料の振り返りをしてみて、 転職時にやりたいと思っていたことが実はそこまで重要視してなかったということが分かったり、 今やっていることを挙げてみると、なかなか言葉にしにくかったりしました。
前職では、案件ごとに職務経歴書みたいなものを更新していたので、ある程度スキルセットの棚卸しをしていたのかもしれません。
2016年の振り返りを年末にする予定なので、それまでに職務経歴書の「やったことはないが興味があるもの」や、まだ書けていない箇所を埋めていこうと思います。</description></item><item><title>Scala関西Summit 2016へ参加してきました #scala_ks</title><link>https://www.grimrose.org/blog/2016/10/scalakansai2016/</link><pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2016/10/scalakansai2016/</guid><description>はじめに http://summit.scala-kansai.org/
http://skug.connpass.com/event/38349/
去年のScala関西 Summit 2015に参加してまた参加したいと思っていたのと、 ScalaMatsuriの運営の参考になればと思い、参加しました。
セッション 今回は、どのセッションも面白そうだったのと、社内に持ち帰って共有したい内容が多かったので、悩みました。
その中で以下のセッションを選びました。
はてなにおけるマイクロサービスとScala akka-stream を始めるときに覚えておきたいこと Implicit 再入門 Play2+SlickだけじゃないScalaのWeb/DBフレームワーク事情 Akka Clusterのネットワーク分断耐性設計 今からはじめる Lens/Prism scala.collection 再入門 Scalaを使いつつDDDを導入しているのでDDDと相性が良いことは実感していましたが、 一部とは言え、はてなのような大きなサービスのドメインを写し取りつつDDDを実践するという話は、とても参考になりました。 Scalaの定石を探る会は、とても興味深かったので今後のカンファレンス等で話される機会があるのを願ってます。
akka-streamは、Reactive Streamsについてずっと勉強していたので、実際にプロダクトに導入するにはどうすればいいのかを学びたかったので、 特に気になっていました。 小さな部品を組み合わせて大きな部品を作っていくところや、どのように既存のAkkaのActorと連携していくのかを知ることが出来てとても勉強になりました。
Implicit 再入門については、様々な入門書や日本語のドキュメントで知ってはいたものの、若干の不安がありましたが、がくぞー先生の説明で改めてScalaのImplicitの機能を知ることが出来ました。
Scalaのフレームワーク事情で紹介されていたScalikeJDBCは、現在のプロジェクトでも利用しており、 フレームワークの標準機能としてDAOやActiveRecordのような使い方が出来て、 さらにSQLの行数が多めの集計用クエリなどでもフレームワークを変えること無く利用出来るので、かなりおすすめです。 特に、ログ周りの設定は、クエリチューニングの際にとても助かっています。
Akka Clusterを導入するかは今後の状況次第ではありますが、分散処理という文脈の中でClusterでどういう故障が起きるのか、 故障が起きた際にどう対応すればいいのかを学ぶことが出来て、分散処理基盤を動かしていくことの難しさを知れました。
Monocle、Lens、Prismは名前だけ知っていて、コワイものだという印象でいましたが、 広く一般的なgetter/setterは関数の世界ではどういったものかを知れました。 case classのインスタンスのcopy hellは、ドメインオブジェクトの変換時にどうしても出てきてしまう問題の一つだと思うので、 適切な局面で扱えるようになりたいと思いました。
社内のScala勉強会でScalaのcollectionをどう使って行けばいいのか説明する時に参考に出来ると思いました。 特に計算量については、件数が多いデータを扱うことが多いプロジェクトなので、頭に入れながらやらないとパフォーマンスが出ないと思うので、ありがたい内容でした。
おわりに 丸一日ずっとScala漬けだったので途中疲れてしまいましたが、懇親会でTLで気になっていた人と実際にお会いする機会があったり、 お世話になっている人にお礼を伝えることが出来たりと、とても充実した一日でした。
また来年開催されることになったら、是非参加したいと思います。
参加者、スタッフ、スポンサーの皆様、ありがとうございました。</description></item><item><title>PyCon JP 2016 に参加してきました #pyconjp</title><link>https://www.grimrose.org/blog/2016/09/pyconjp-2016/</link><pubDate>Sun, 25 Sep 2016 00:00:00 +0000</pubDate><guid>https://www.grimrose.org/blog/2016/09/pyconjp-2016/</guid><description>はじめに PyCon JP 2016
今後仕事でPythonを使う機会が増えるだろうということと、ScalaMatsuriの運営はPyCon JPの運営を参考にさせて頂いてるので、 実際スタッフの人はどのように動いているのかを見てみたいと思い参加してみました。
セッション 選択したセッションは、以下のとおりです。 両日の基調講演は、朝起きられず途中からでした。 基準として仕事で使う際に必要そうなのを重点的に選んでみました。
1日目 基調講演 週末サイエンティストのススメ データ分析スクリプトのツール化入門(GUI付与・EXE化) Getting started with chatops in python with errbot Robot Frameworkでブラウザテストやってみた話 2日目 基調講演 Pythonではじめるfinance hack入門 Deep Learning with Python &amp;amp; TensorFlow Building Distributed System with Celery on Docker Swarm pandasによる時系列データ処理 Building a data preparation pipeline with Pandas and AWS Lambda 特に、ChatOpsのPythonで書かれたerrbotのセッションは、興味深かったです。 hubotはcoffeescriptなのが微妙、botkitはほぼSlack専用、rubotyはRubyなのでチームでメンテナンスしていくのが難しそうだったので、 Pythonのがあるならどんな感じなのかなと思ってました。
その他では、データ分析でよく使われているpandasに基本的な知識から実際にどう使っているかを知れて、勉強になりました。
カンファレンス運営 当日の運営という視点から見たときは、相当準備されていたのか着実に実施していて素晴らしいと思いました。 トラブルの対応も行動規範に沿って説明がされており、運営が一体となって解決に取り組んでいる姿勢を見せていたのが特に印象的でした。
おわりに 仕事で必要になるということで初めて参加してみましたが、とても充実した2日間でした。 今後は、Pythonのコミュニティイベントにも参加していこうと思います。
参加者、スタッフ、スポンサーの皆様、ありがとうございました。</description></item><item><title>「独習Python入門―1日でプログラミングに強くなる！」を読み切りました</title><link>https://www.grimrose.org/blog/2016/09/self-education-python/</link><pubDate>Mon, 05 Sep 2016 21:11:45 +0900</pubDate><guid>https://www.grimrose.org/blog/2016/09/self-education-python/</guid><description>きっかけ これまで、jupyter-notebookやfabricを使ってきたのですが、pythonそのものを使って何かを作るといったことはしてこなかったので、 仕事で本格的にPythonを使うことになる前に、一から学べる本があればいいなと思い、電子版で出版されている中で入門にカテゴリされている本を探していました。
はてブなどでいろいろ探してたところ「独習Python入門」は一生付き合える入門本だと334回言いたいの記事がみつかり、 求めてる内容にマッチしてそうだし、ござ先輩は以前に、これからの「エンジニアリング」の話をしよう に参加しました #vcafe のイベントの講師として来られていた方だったので、間違い無さそうと思い購入しました。
読みきってみて 率直な感想は、「物足りない」でした。が、それは私がこの本が想定されているスキルと合ってなかったからだろうなと思います。
私がもしこの本を勧めるとしたら、例えば普段Excel VBAのような旧石器時代の言語でデータ分析していて、 より現代的なプログラミング言語で楽ができる良いツールは無いかと模索している人ような隣の島にいるメンバーです。
そういう人は、gitやpyenvやvirtualenvといった開発環境をいれる際に躓くのが最も挫折しやすい難所なので、 インストールは簡単にスムーズに行く方法を教える必要がありますが、解説付きで載っているので安心です。
ある程度、VBAとはいえプログラミング言語を知っていれば、丁寧な解説とかわいいイラストでどんどん先に進めるでしょう。
もちろん、プログラミング初めての人でも、躓いた箇所を読み返しつつ進めていくことが出来れば、あっという間に後半まで進めると思います。
9章、10章は、プログラミング言語を使うとこんなことも出来るんだよというちょっとハードルの高い章だと思いますが、ここまで読み進めた人であれば大丈夫だと思います。
最後の11章のしっかりと今後何をやっていったらいいのかを伝えながら背中を押す感じが、読み終えてとてもいい心地でした。
全部の章に練習問題と答えがあり、間違えそうな箇所はしっかり説明がされていてサポートが手厚い印象でした。
既にRubyやJava、JavaScriptといったプログラミング言語を使ってコードを書いている人には物足りないかもしれません。
そういう人向けにいい本や記事があれば、教えて頂ければ幸いです。
おわりに 次は、ほぼ同じ時期に購入した入門 Python 3を見て、 独習Python入門でカバーされていなかった内容を補完しつつ、仕事で使うNumpy, Scipy, pandas方面に進みたいと思います。</description></item><item><title>JJUG CCC 2016 Springに参加してきました #jjug_ccc #ccc_m61</title><link>https://www.grimrose.org/blog/2016/05/jjug-ccc-2016/</link><pubDate>Thu, 26 May 2016 00:00:00 +0900</pubDate><guid>https://www.grimrose.org/blog/2016/05/jjug-ccc-2016/</guid><description>発表のキッカケ ちょうど日々の業務でGradleのタスク機能を利用して、共有ディレクトリにあるExcelのデータとDBの値とチェックしたり、 前回の作業との差分を抽出して入力ミスがないかチェックしたり、といった小さい業務タスクを自動化していたので、 50分は無理でも新しく出来た20分枠ならイケるんではないかと思い、 Groovy枠として選ばれたら本気でやるかといった感じで応募しました。
なので、十徳ナイフとしてのGradle / @grimrose #35に投票して頂いた皆様には、大変感謝しております。
jupyter使ってる理由 ここ最近、発表資料にはjupyterを活用しています。理由としては以下のとおりです。
日常的に使っている。 Markdownで書ける。 スライドの確認がし易い。 リンクや画像を埋めるのが楽。 コードのシンタックスハイライトもされる。 Docker imageにしてしまえば、docker runかdocker-compose upですぐに使える。 takluyver/bash_kernelを入れれば、jupyer-notebookからbashが使える。 GitHubへpublishすれば、nbviewerで閲覧できる。 標準のPythonやSpark向けのイメージを使えば、REPL代わりに使えるし、実行結果も保存出来たり等重宝してます。
発表の主旨 今回の発表で一番伝えたかったのは、「ツールは達成したい目的によって変えましょう」ということです。 「日常業務を楽にしたい。」であれば、自分の本来やらなければならないメインの仕事に割り当てる時間を増やすというのが目的なので、 今回は自分が使えて、すぐに解決出来る「Gradle」を採用したまでです。
もちろん、Excelを使うヒトとの協調が必要であれば、Excel VBAも利用します。
Gradleで解決したタスクもゆくゆくはシステム化を目指すのであれば、それに依存するのではなく捨てられるようにしておくのが望ましいと思います。
そのままシステム化しようとすると、手段が目的となってしまい、本来解決しなければならなかった課題にたどり着くことが出来ず、 自分だけしかメンテナンス出来ない負債が残るだけです。
サンプルの解説 Gradleのタスク機能を使ったサンプルプロジェクトは、こちらです。
grimrose/JJUG-CCC-2016-Spring
あるプロジェクトを一つのworkspace配下において行くような場合を想定してます。
そのプロジェクトを構成しているそれぞれの個別プロジェクトを、Gradleのマルチプロジェクト機能を利用して、Gradleの依存を含めること無く操作できるようにするのが目的です。
特にフロントエンドは、完全に趣味とトライアルに走ってみました。 個人的に気になっているMithrilとTypescript, power-assert-js, webpackの組み合わせに挑戦してみました。
その他のプロジェクトも、jarを動かしたり、JRubyを使ってRubyのプロダクトを動かしたり等、Gradle WrapperとJDKが入っているだけのマシンでここまでやれたり、 プロダクトを統括するタスクランナーとしてのGradleというのを示すことが出来たのではないかと思います。
参加したセッション 今回参加したセッションは、以下のとおりです。
E-2 ブラウザテストをサクサク進めるためのGeb実践入門 GH-3 Jenkins2.0 AB-4 Introduction to JShell: The Java REPL Tool AB-5 Apache Apexとインメモリー最適化による超高速処理の世界 AB-6 ビッグデータじゃなくても使えるSpark☆Streaming GH-7 Java Pazzler M-7_2 JVM上でのストリーム処理エンジンの変遷 セッション数が増えたのと20分枠のおかげで、体がいくつあっても足りないという感じでしたが、 休憩のタイミングと間隔にゆとりがあったおかげでそこまで大変では無かったと思いました。</description></item><item><title>ScalaMatsuri2016に参加してきました。 #ScalaMatsuri</title><link>https://www.grimrose.org/blog/2016/02/scalamatsuri2016/</link><pubDate>Mon, 08 Feb 2016 20:31:14 +0900</pubDate><guid>https://www.grimrose.org/blog/2016/02/scalamatsuri2016/</guid><description>ScalaMatsuri
はじまり 前回のScalaMatsuriが楽しかったので、スタッフとして参加してみようと思い飛び込んでみました。
https://japan-scala-association.doorkeeper.jp/events/23255
スタッフとして 約半年関わってみて、ここまで大きなカンファレンスの裏側をScalaのコミュニティの人たちと一緒に体験できたのは、正直楽しかったです。
終わってみて反省すべき点がたくさんありますが、これから開催されるであろう振り返りでいろいろ見直したいです。
開催当日の個人的な反省としては、日常会話の英語が出てこないというのはホントに辛かったです。
普段Webinarとかで聞いてたり、英語の文献とか読んでいたとしても話せるようにはならないことは分かっていたました。
ですが、短い時間でとっさにフレーズが出てこなくて慌てていて、相手にもその雰囲気が伝わるので申し訳ない気になって、さらにパニクるといった感じでした。
ジェスチャーや一緒に対応してくれていた人に助けてもらったり、最終的に英語が話せるスタッフの人にお願いしてなんとかしました。
おわりに まだ、残務がいろいろあって終わっていませんが、次回があるのならまたスタッフとして参加してみたいと思います。
ご参加いただいた皆さん、ご協賛いただいたスポンサーの皆さん、そして一緒に尽力してくださったスタッフの皆さん、本当にありがとうございました。</description></item><item><title>2015年の振り返り</title><link>https://www.grimrose.org/blog/2015/12/retrospect-2015/</link><pubDate>Thu, 31 Dec 2015 23:59:59 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/12/retrospect-2015/</guid><description>2015年の振り返り 今年も大晦日になったので、振り返りをしてみたいと思います。
2014年の振り返りは、こちらでした。
Keep 今年は、以下のイベントで登壇する機会をいただけました。
【東京】JJUG ナイトセミナー 「Reactive Streams特集」 合同勉強会 in 大都会岡山 -2015 Winter- 忘年会議2015 仕事で得た知見や個人で興味を持ったことについて話す機会は、今後も増やしていければと思います。
アウトプットする為にも、まずコードやBlogで書き出すということをもっと積極的にやっていこうかと思います。 特にBlogは書かなかった月が多かったので、短くても残さないとどんどん忘れていきそうなので、 GitHubに草を生やす活動も兼ねてやっていこうかと思います。
ミドルウェア、インフラ周りの基礎に関しては、引き続きDockerを中心に学んで行ければと思っています。
特にDocker Cookbookを購入して 自分たちが使えるものが無いか探したり、どのようにDockerで構成していけば良いのかを学んだりしています。
また、Microsoft Azureのアカウントを作って、Tutumでデプロイしてみたりしてました。
Dockerを使って試せるようなサービスが出てきたので、これまで非力なローカルマシンでは試せなかった構成や、既存のサービスと組み合わせる方法を検証できるようになったのは、大きな変化だったと思います。
Problem 2014年のTryだったFuelPHPのプロジェクトは、2015年中にはやれませんでした。
しかしながら、年明けから仕事でサプブロジェクトながらFuelPHPで始めることになりそうなので、 front, api, batchをDockerで動かすような雛形を作ってみて検証してみたいと思います。
Rubotyも結局触ってみました程度で終わってしまったので、Rubyのプロダクトにがっつり関わる機会が無い環境では、 強制的にでも使う仕組みが無いと難しいものだと感じました。
仕事では、チームでプロジェクトを動かしていくことの難しさを実感しました。 特にプロダクトオーナーに現時点でリリース出来ないことを伝えることが、どれだけ不甲斐なくて悔しいことかを体験しました。
Try 仕事での今後やりたいことは、転職して１年が経ちました。に書いてしまったので、 privateでやってみたい事は、OSSを一つリリースする(ライブラリ、Webサービス問わず)です。
仕事で使うようなライブラリを作るのが一番自分にとって勉強にもなるし、フィードバックも得やすいのではないかと思います。
また、本格的にScrumに関する勉強を始めて、最終的には認定スクラムマスター(CSM)も取得してみようかと思います。
CSMについては、横浜道場でいろいろな人が受けてたり取られたりした方の話をこれまで聴いてどんな感じなんだろと思っていました。 Scrumのプラクティスを取り入れつつ開発を進めていましたが、行き詰まりを感じたり、他の人達はどうしているのか気になってきたので、本格的に始めます。
おわりに 2015年は、仕事でやりたかった事が出来たのとそこで出てきた課題に取り組めた一年だったと思います。
2016年は、引き続きコードを書くお仕事に加えて、チームを育てていく役割も担っていくことになると思います。
また、いわゆる「プログラマー35年定年説」の節目の年となるので、今後の5年を見据えて伸ばすスキルを伸ばしていければと思います。
2016年も引き続き、よろしくお願いします。</description></item><item><title>Spock Frameworkに関する電子書籍たち</title><link>https://www.grimrose.org/blog/2015/12/gadvent-2015/</link><pubDate>Sat, 19 Dec 2015 00:00:00 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/12/gadvent-2015/</guid><description>はじめに この記事は、G* Advent Calendar 2015の19日目のエントリです。
Spockについて Spock Frameworkは、JavaやGroovyで作られたアプリケーション向けのテスティングフレームワークです。
個人的にSpock Frameworkが好きな理由の一つは、power-assert機能です。
power-assertが他の言語のテスティングフレームワークでも取り入れられていったのは、覚えるAPIが少ない上にテストで失敗した時の情報が分かりやすいからだと思います。
アサーション失敗時の情報量を大幅に増やすことができるPower Assertの系譜
仕事ではScalaTestを使っていますが、 power-assertのように使えるDiagrammedAssertionsをメインに使ってます。
その他にもパラメタライズドテストが書きやすかったり、Given-When-Thenと振る舞いを分かりやすく書ける機能があったりと、開発者がテストを書くのを助けてくれるのがとても好きです。
2015年のSpock Frameworkと言えば、なんと言ってもついに1.0がリリースされたのことでしょう。
Google Codeが終了するするにあたって、さまざまな事が一気に前進したように思えます。
公式のリファレンスもGitHubに移動し、Spock Framework Reference Documentationとして公開されています。
JUnit5がリリースされるとなるとSpockもどのように対応するのか楽しみではあります。
Spockを題材とした電子書籍 日本でも利用されている方が増えてきたおかげか日本語の記事や情報を見かける機会が増えましたが、本格的に導入していこうとすると英語の記事を見ることになります。
公式のリファレンスが充実しているので困ることは少ないですが、やはり自分たちのユースケースに近いサンプルがあるのが望ましいと思います。
そういう場合は書籍の出番となりますが、今回は入手しやすい電子書籍を探してみました。
普段利用している電子書籍を購入できるサイトで、Spockに関する書籍が見つかったのは、以下のとおりです。
O&amp;rsquo;Reilly Manning Publications Leanpub O&amp;rsquo;Reillyは有名なので割愛するとして、Manning PublicationsはGroovy In Actionや Grails in Actionで以前からGroovyに関する書籍を取り扱っているのは知ってました。
注目したいのは、Leanpubで以前Everyday Rails - RSpecによるRailsテスト入門を購入した際に利用していました。
Groovyについて困っている時やどう書いたらいいのか分からない時にMessages from mrhakiで探していますが、 その著者がLeanpubでGroovy Goodness NotebookやGradle Goodness Notebookといった Groovyに関する書籍を販売しており、その一つにSpockに関するものもありました。
購入したもの これまで購入したのは、以下の3冊です。
Spocklight Notebook Groovy in Action, Second Edition Spock: Up and Running まずSpocklight Notebookですが、Leanpubで購入できます。実はWebで全部見れてしまう上に最低価格が$0なので実質Freeなのです。 中身もユースケース毎に細かく分かれているため、自分たちの求めている内容がきっとあると思います。</description></item><item><title>Clojure ワークショップ(仮)に参加してきました #jc_ws</title><link>https://www.grimrose.org/blog/2015/12/jc-ws-2015/</link><pubDate>Mon, 14 Dec 2015 00:00:00 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/12/jc-ws-2015/</guid><description>はじめに 【参加者募集】 Clojure ワークショップ(仮)に参加してきました。
きっかけは、以前にしょぼちむにデータモデル設計について教えてくださいの会 #syobobenで@kawasimaさんが 以下のプレゼンをした時にでてきたDatomicが気になったからです。
その後、@kawasimaさんがリリースしたJobStreamerがDatomicが使われていたので、 どうやって使ったらいいのかを知りたい、せめてClojureが読めるようになりたいと思ってました。
その後の渋谷Javaなどで@kawasimaさんがClojureの話をされていたので、無意識に刷り込まれていたのかもしれません。
あやぴーさんが開催されるとのことだったので、楽しみにしてました。
キメるClojure タイトルは「Rubyをキメると気持ちいい」から来てるとおもいますが、挙げられているClojureのコードを後から見なおしてみるとすっきりしていて分かりやすかったです。
こういう思想で作られていると使いやすいのではないかと思いました。
ワークショップ あやぴーさんが用意して下さったjapan-clojurians/curriculumのチートシートをまず読んでました。
はじめは、jupyterでもできないかなと思い、Clojureのroryk/clojupyterを入れてやろうとしてましたが、 ZeroMQとの連携が上手く行っていないのかエラーがでて使えませんでした。 ClojureではGorilla REPLを使うのが良いらしいので、今度使ってみようと思います。
仕方ないので、前日に用意していたIntelliJ IDEAとCursive pluginでやることにしました。
その後は、紹介されていたClojure koansをずっとやってました。
穴埋めで、1問づつ答えていく形式なので、困ったときはREPLで確かめながらやってました。
普段は、スニペットの確認はREPLではなくテストコードでやっているので、ClojureのREPLがここまで便利だとは思ってませんでした。
おわりに togetterはこちら -&amp;gt; Clojure ワークショップでした！。
これでClojureを読める手段を手に入れることが出来たので、JobStreamerのコードを読んで行こうと思います。
いずれは、イミュータブルデータモデルとDatomicを使った何かを作ってみたいと思います。 あとAltJSの一つとしてClojureScriptも興味が出てきたので、watchしていこうと思います。
あやぴーさん、TAの皆様、会場を提供して下さったサイボウズスタートアップス株式会社様、ありがとうございました。</description></item><item><title>業務アプリケーションをElectronで作ってみた話をしてきました #gbdaitokai #忘年会議</title><link>https://www.grimrose.org/blog/2015/12/daitokai-2015/</link><pubDate>Sun, 13 Dec 2015 00:00:00 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/12/daitokai-2015/</guid><description>はじめに このエントリーは、Electron Advent Calendar 2015の13日目の記事です。
公開資料 発表で利用した資料はこちらです。 -&amp;gt; スライド
スライドは、jupyterにdamianavila/RISEの拡張を入れて作りました。
公開当日は、nbviewerのサイトの調子が良くなかったのかメンテナンスだったのか見えませんでしたが、現在は見えるようになりました。
おまえ、誰よ 普段は、PHPとScalaを使った社内BIのWebアプリケーションを開発しています。
ここ1年位の仕事を振り返ってみたエントリは、こちらです。
参加した経緯 以前から忘年会議の会場であるRyotei 座・スタジアムに一度行ってみて喋ってみたいと思ってました。
今年、いいタイミングで飛行機のチケットとホテルが確保できた為、参加することにしました。
スライドの補足 ここで言うスタンプラリーは、業務端末にソフトウェアのインストール際にいろいろな申請が必要であることを指します。 その工程を開発段階から実際にオペレーションする人に強いるのは出来るだけ避けたいと考えていました。
もちろんがっつり開発するのであれば必要な申請はすべきですが、まだプロトタイプも出来てないし、 どんなプロダクトになるのか不明なうちは簡単に使えるようにしておくのがベターだと思い、こういう判断をしました。
VBAを選択しなかった理由は、継続的にリリースするには今時のビルドパイプラインが構築しやすい言語がいいと思ったからです。 確かに探せば手法は見つかりますが、一から構築するには手間が掛かり過ぎると思ったので、既存のWebアプリケーションのラインに間借りする事が出来るメリットを優先しました。
ボイラープレートからReact.jsに関する部分をMithril.jsに置き換えて、デプロイに関するgulpのタスクを追加したのをベースに開発をしました。
普段は、Angular + Typescript + Gruntでやっているので、Babel(ES6) + Mithril.jsの習得には、そんなかからないだろうと甘く見てましたが、 Babel(ES6)が初だといろいろと調べながら進めることになったので、Typescriptとの違いなどでハマることが多かったように思います。
Mithril.jsで一番参考になったのは、Dave&amp;rsquo;s guide to Mithril.js Part 1の記事でした。 特にイベント発火とViewModelのやり取りをどう扱って、画面にどう反映させるのかが参考になりました。
IndexedDBやLocalStorageを使わなかったのは、両方とも使い方を知らなかったのと、Excelから取り出したJSONが大きかったので、 一旦ファイルに保存してから必要なデータだけをキャッシュ出来るようにしたかったためです。
Loki.jsであれば、IndexedDBとファイルのどちらでも利用できるので、上手く使い分けて行きたいと思っています。 が、minimongoでIsomorphic Storageも気になるので試してみたいと思っています。
今後このシステムが発展した場合、Electronとサーバーサイドでのデータの持ち方や扱い方については、明確にしておかないと無駄が発生する可能性があるので考慮しておきたいと思っています。
やってみた感想 メインがサーバーサイドのエンジニアであるため、片手間でフロントエンドをやるのはやはり厳しいと感じました。
今回作ったのはあくまでもプロトタイプなので、今後の方針次第によっていろいろと変化していくと思います。
今回は一人だけで作ったのですが、正式にチームで作り始めるとなるともう少しフレームワークの選定やデプロイまでの検証も必要になってくると思います。 また、bowerに依存している箇所をnpmに集約したいので、gulp + bowerでやっているCSSフレームワークやfont-awesomeに関する箇所をどのように変えていけば良いのか、情報を探してみたいと思います。
デスクトップアプリもWebと同じように作っていけるElectronは、業務アプリケーションとしての選択肢としてあり得ると思います。 Node.jsのライブラリがそのままWebアプリケーションから呼び出せる感覚は新鮮でした。
さいごに 忘年会議のLTの内容が皆さんかなり尖っていて、技術方向に全振りした自分の内容は面白い要素ゼロだったので完全アウェーな気分でした。 ですが、あの場所でLTすることが今回の最大の目的だったので、最後までやりきれて感無量でした。
LTの猛者でまだあの場所でLTをされてない方は、一度でもいいので体験してもらいたいと思いました。
次回は、座駆動LT大会20160220らしいので、是非参加してみてはいかがでしょうか？</description></item><item><title>転職して１年が経ちました。</title><link>https://www.grimrose.org/blog/2015/12/career-change/</link><pubDate>Tue, 01 Dec 2015 00:00:00 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/12/career-change/</guid><description>はじめに 2014年12月に転職してから1年経ったので、振り返ってみます。
半年前はこちら。
引き続き、データ分析チームのエンジニアとして働いてます。
開発言語もPHP, Angular, TypeScriptに加え、Scalaも使うようになりました。
Scalaの導入については、別の機会に書ければと思ってます。
これまでやってきたこと 社内BIの開発チームのリーダーを任されるようになった。 バッチ処理の一部をScalaに置き換えた。 electronを導入して、VBAでやっていたのを置き換えできないか検証してた。 フロントエンドからクラウド上での環境構築まで、自分たちで出来ることはほぼ全てやっている状況です。
全部自分たちでやるのが正しいかと言われると、考えさせられる部分があります。
とはいえ、エンジニアとしては流行りのプロダクトや手法は触っておきたいですし、スキルも得たいとも思います。
そこは、導入までのプレゼンで説明が必要ですし、継続的にリリースをして信頼貯金を得る必要が出てきます。
この1年間地道に機能をリリースしたことで、部署の中で自分が何が出来てどういったスキルを持っているのかを認知してもらうことが出来ました。
これからやってみたいこと 次の1年でやりたいことは、以下の内容をやってみたいと思ってます。
Akka Streamsの導入 Kubernetesを用いたDocker Clusterの導入 electronを使った業務アプリの継続的開発 pythonを使ったシステムの構築及び運用 In-memory Data Gridを活用した機能の検証 全部が出来るとは思ってはいませんが挑戦できる環境ではあるので、準備を怠らずいつでも始められるようにしたいと思います。
また、持続可能な開発体制が必要になってきているので、Scrumに関する勉強も本格的に始めてみようかと考えてます。
引き続き、新しいことに挑戦しつつ、日々の業務を止めないように気を引き締めて開発していきたいと思います。</description></item><item><title>JJUG CCC 2015 Fallに参加してきました #jjug_ccc</title><link>https://www.grimrose.org/blog/2015/11/jjug-ccc-2015/</link><pubDate>Mon, 30 Nov 2015 00:00:00 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/11/jjug-ccc-2015/</guid><description>http://www.java-users.jp/?page_id=2056
セッション 今回は、以下のセッションを選択しました。
keynote-1 基調講演1: 「Javaは守りに入らない、これが今のJavaだ」 keynote-2 基調講演2: Java EE 8 – Work in Progress AB-1「jOOQ と Flyway で立ち向かう、自社サービスの保守運用」(仮) EF-2 How to speed up your application using JCache[通訳あり] EF-3 Reactive Webアプリケーション – そしてSpring 5へ EF-4 ソラコムでのJava/AWS活用 – SIM管理やAWS Lambda Javaなど – AB-5 Javaエンジニアに知ってほしい PostgreSQLアンチパターン GH-6 Java8 Stream APIとApache SparkとAsakusa Frameworkの類似点・相違点 GH-7 てらだよしおの赤裸々タイム 今回のタイムテーブルを見たら、どのセッションを見たら良いのか迷ってしまうくらい素晴らしい講演者の方々でした。 選んだ幹事の人達も苦労されたと思います。
この1年、素のJavaを書くことは無くなってしまったので、選択も運用やDB等言語としてのJava以外を中心とした内容になりました。
どのセッションも面白かったですが、てらださんが楽しそうに活動をされている話を聞けたのが、一番印象的でした。
さらに懇親会や帰り道でいろいろな人とお話が出来て、その中でいろいろ解決手段などを教えていただくことが出来ました。 ありがとうございました。
おわりに 今回もYokohama.groovyの宣伝も兼ねたLTをしてきました。
pythonの勉強に使っているjupyterを使って、スライドを作りました。
Markdownでwebブラウザで再生出来るスライドに出来るので、こういう時には結構使えますね。
予定としては、Spock: Up and Running Writing Expressive Tests in Java and Groovyが出版され次第、読書会をやろうと思っています。</description></item><item><title>Seasar Conference 2015 Not 同窓会 に参加してきました #seasarcon</title><link>https://www.grimrose.org/blog/2015/09/seasarcon2015/</link><pubDate>Tue, 29 Sep 2015 01:25:47 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/09/seasarcon2015/</guid><description>https://event.seasarfoundation.org/sc2015/
http://seasar.connpass.com/event/19317/
Seasar2はプロダクトでも使ったことがあるし、Seasar Conferenceがあったおかげで今の自分があると思っているので、参加してきました。
セッション Seasar ユーザだったプログラマが目指す OSS の世界展開
瀬良さんのセッションは、大学の教室ということもあり本当に歴史の授業っぽい雰囲気でした。 Skinny Frameworkは、今のプロジェクトで使っていて大変お世話になっています。 特にSkinny-ORM, ScalikeJDBCはSQLをゴリゴリ書くようなプロダクトに向いていると思います。 GitHubがデファクトとなっている現状では、日本語より英語のドキュメントを充実するほうがより使ってもらえる可能性が高いのは確かだと思います。 Play Framework + Scala は Next Seasar なのか
Next Seasarについては、既存のSeasar2を利用したプロダクトを別のフレームワークに置き換えてもそれなりに利益を生むようなものでない限り時代に取り残されて行く運命なのかも知れないと感じました。 挙げられそうなNext Seasarとしては、Spring bootやJavaのMicroframeworkやJava EE等があります。 ですが、メンテナンスする人達がJavaの進化に置いて行かれるような場合、選択すら出来ずどうすることも出来ない状態に陥るのではないかと思います。 「Single Command Deployのためのgradle-aws-plugin講座」〜自動ビルド厨はここまで大きくなりました〜
Gradleの話を聞いてみたかったのと、AWSへのデプロイツールとしてどう使うのか興味がありました。 ドキュメントに残さなければいけない箇所を出来る限り少なくして、自動化するというのはとても参考になりました。 Spring Boot for the Seasar Developers – みんなが欲しかったアレもソレもここにある
ライブコーディングでサクサクとSpring bootを使ったWebアプリを作っていくのは、楽しそうに見えました。 Spring bootのremote-shellは、CRaSHがベースなので、単体でも使うことが出来ます。 IntelliJ IDEAであれば、Using Language Injectionsを使うことで、StringのSQLに対してシンタックスハイライトを付けることが出来るようになります。 SIは本当に終わったのか?</description></item><item><title>JUnit Lambda に寄付をしました #fundJUnit</title><link>https://www.grimrose.org/blog/2015/09/junit-lambda/</link><pubDate>Sat, 19 Sep 2015 00:04:27 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/09/junit-lambda/</guid><description>@t_wada さんのツイートから知りましたが、JUnitのプロジェクトが援助を求めているそうです。
Crowdfunding JUnit Lambda
日本語での詳細な内容については、JUnitの開発が資金不足で行き詰まり。クラウドファンディングで寄付金を募集中 を見ていだくのがいいと思います。
JUnitと私 個人的にJUnitを真面目に使い始めたのは、TDDBCで使い方を教わってからだと思います。
その時教えていただいた渡辺さんが書かれたJUnit実践入門を読んで、Javaでユニットテストを書くにはどうしたら良いかを学ぶことが出来ました。
それからGroovyと出会い、Spock Frameworkに惚れてTDDBCのGroovyのTAをやったり、アジャイルサムライのイベントで紹介をしたりしてました。
現在の仕事では、PHPUnit、ScalaTestを使っています。
xUnit系テスティングフレームワークは、テストを書く際に覚えることが少なくて、ユニットテストの書き方を学ぶ際に、余計なことを覚えなくても済むのがメリットだと思います。
あと、モダンな言語であればだいたい備わっているので、言語を覚える際にもassertionの書き方を覚えればなんとか始められます。 それまでユニットテストを書く際の経験がそのまま言語を学ぶ際にも応用が出来るのが、xUnit系のテスティングフレームワークの良いところだと思います。
個人的にJUnitがもう少し頑張って欲しいのは、「パラメタライズドテストの書き方」、「失敗時のメッセージが分かりにくい」だと思います。
これはSpockを知ってしまってから、余計に感じるようになったと思います。
もちろんJavaの言語仕様として難しい部分もあると思いますが、出来ればpower-assertは入って欲しいと願ってます。
power-assertについては、日本語ではThe power-assert Leaves From Moratoriumがまとまっていると思います。
今回のFundingでどこまで機能が盛り込まれたり、改善されるかは経過を見守る必要があると思います。
Java8対応で特にDateTime APIでMatcherが早急に欲しい人は、AssertJを検討してみるのも良いかもしれません。
おわりに opensslと同様の経緯をまさかJUnitも歩んでいるとは思ってもいませんでした。
普段使っていたり、過去お世話になったOSSがメンテナンスされ続けるのは、誰かの犠牲や善意によって成り立っているのだと感じました。
また、「コードを書く」以外の事で貢献出来る何かを改めて考えさせられました。
もし、JUnitを使っていたり、今後も使い続ける事になるのであれば、既にゴール金額に到達していますが、寄付を考えてみてはいかがでしょうか？</description></item><item><title>YAPC::Asia Tokyo 2015 に参加してきました。 #yapcasia</title><link>https://www.grimrose.org/blog/2015/08/yapc-asia-tokyo-2015/</link><pubDate>Sun, 23 Aug 2015 22:34:34 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/08/yapc-asia-tokyo-2015/</guid><description>http://yapcasia.org/2015/
きっかけ Guest Speakerにそうそうたるメンバーがいらっしゃったのと、PHPをやり始めてから気になった次のスライドがYAPC::Asia Tokyo 2014だったのが気になったので、参加してみようと思いました。
個人スポンサー YAPC::Asia Tokyoのチケットは、非常に取りにくいということで、個人スポンサーで申し込みました。
Tシャツやパーカー等のノベルティも楽しみでしたが、ひとまずチケットを取れたことに安堵してました。
当日ノベルティとして受け取ったタンブラーは、とても使いやすくて重宝してます。
セッション 参加したセッションは、以下のとおりです。
前夜祭 我々にできるOSSとそのコミュニティの育てかた 1日目 メリークリスマス！ Effective ES6 TBD Conway&amp;rsquo;s Law of Distributed Work Electron: Building desktop apps with web technologies Perl6 on JVM: It works?? 2日目 ISUCONの勝ち方 我々はどのように冗長化を失敗したのか MySQLで2億件のシリアルデータと格闘したチューニングの話 データ分析基盤を支える技術 Parallelism, Concurrency, and Asynchrony in Perl 6 HTTP2 時代の Web 概ね見たいと思ったセッションを見ることが出来たと思います。
Perlのセッションもコードが出てきて分からない部分も多かったのですが、それなりに楽しむことが出来ました。
個人的に、グッと来たのは、以下のセッションでした。
Effective ES6
早くES6が標準で使える環境を整えていきたい。 現在使用してるtypescriptをES6に移行する手順も考えておきたい。 ISUCONの勝ち方</description></item><item><title>【東京】JJUG ナイトセミナー 「Reactive Streams特集」 に参加してきました。 #jjug</title><link>https://www.grimrose.org/blog/2015/06/jjug-2015-reactive-streams/</link><pubDate>Sat, 27 Jun 2015 18:19:34 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/06/jjug-2015-reactive-streams/</guid><description>はじめに https://jjug.doorkeeper.jp/events/26547
@makingさんから、@okapiesさんと一緒に「Reactive Streams」について話してくれと頼まれましたので、参加してきました。
元々は、@cero_tさんが発端らしいです。
初めは、マイナーなネタならそんなに人集まらないだろうと思ってたのですが、キャンセル待ちが100人超えするくらいまで期待されてて正直びっくりしました。
当日のアンケートシステム、とても良かったので次回以降改善されるのを期待してます。
資料 @okapiesさんの資料は、こちらです。
私の資料は、こちらです。
http://grimrose.github.io/jjug-2015-reactive-streams/
利用したサンプルコードは、こちらです。
https://github.com/grimrose/jjug-2015-reactive-streams
元々は、Vert.x3でやろうと思ってましたが、ReactorかRxJavaでと言われたので、使ったことがあるRxJavaを選びました。
確かに、当日のアンケートを見るとVert.x3、Ratpackの認知度が低すぎて、RxJavaを選択しておいてよかったと思いました。
ドキュメントの多さは、やはりRxJavaに分があるのですが、Reactorもかなり充実しています。
個人的には、MongoDB Reactive Streams Java Driverがチュートリアルとして、充実してると感じました。
初めてJavaでAkkaを使ってみたのですが、いろいろツライ印象しか受けませんでした。
あれなら、素直にScalaで使ったほうが分かりやすいと思います。
おわりに Reactive Streamsについては、それぞれのRuntimeの世界を繋ぐ為の仕様という認識が一番分かりやすいと思います。
実際の泥臭い部分は、Runtimeが頑張ってくれますが、何をやっているのか、どうやって実現しているのかを知っておくのは大切です。
どのRuntimeもReactive Streams向けに変換するライブラリがありますので、そのソースコードを読むのも勉強になると思います。
JDK9にどこまで採用されるか分かりませんが、データフロー制御についての共通インターフェースが採用されると、java.util.concurrentと併せて、非同期処理をもっと使いやすくなると思います。
JVMでデータフロー制御でお困りの方は、使ってみてはいかがでしょうか。
JJUGのスタッフ、参加者の皆様、@okapiesさん、ありがとうございました。</description></item><item><title>転職して半年が経ちました。</title><link>https://www.grimrose.org/blog/2015/06/career-change/</link><pubDate>Mon, 01 Jun 2015 00:08:51 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/06/career-change/</guid><description>はじめに 2014年12月に転職してから半年経ったので、振り返ってみます。
退職エントリはこちら
所属 今は、データ分析チームのエンジニアとして働いています。
転職時に希望したことが出来るチームなので、とてもやりがいがあります。
また、転職時にお世話になったマネージャーが、会社のエンジニアが働きやすい環境を作り上げたという話を聞いたので、足を向けて寝られません。
チームには分析官の方がいらっしゃるので、統計に関する知識やR言語についても学べる環境なのはありがたいです。
その他にも、Sparkや機械学習等新しい技術についても取り組むことが出来る環境でもあるので、積極的に学んで行こうと思います。
今のチームのマネージャーも理解のある人で、「分析」をどのように事業に活かすのかを真剣に考えていて、そのための武器をエンジニアと一緒に作っていこうとおっしゃってました。
自分が出来る事をチームに還元していければ、自ずと結果はついてくると思っているので、精一杯やっていこうと思います。
開発 開発環境は自由に選べますが、私を含めほとんどの人はMBPの15インチを選んでます。
転職して最初の頃は、小さい社内Webサービスの引き継ぎをやってました。
言語は初めてのPHP、しかもPhalcon。
ひとまず、SQLを読むのと既存の機能の改善に注力してました。
今まで手作業やExcelでやっていた事を、Webサービスで置き換えていく途中だったので、実際に使われている人にとても喜ばれていました。
そこで社内でどのようにプロジェクトを進めていくのかなどを学べました。
しばらくして、別のプロジェクトの機能追加の案件も始まりました。
こちらは、FuelPHPでした。
このプロジェクトにメインで携わるとは、その時は思っていませんでした。
どちらもIntelliJ IDEAが無いと仕事が出来ないくらい四苦八苦してました。
幸い、このプロジェクトは、ユニットテストをしっかり書いて、JenkinsでCIまわして、ワンクリックでデプロイ出来るように運営されていました。
そのおかげもあって、なんとか求められていた機能もリリース出来て、現在も動いてます。
このプロジェクトの他の特徴としては、フロント周りにはAngularJS + TypeScriptを採用したりしています。
また、今後バッチ処理をScalaに置き換える為に、いろいろ検証や準備をしているところです。
おわりに 自分のスキル足りなくてチームや顧客に迷惑をかける事があり、歯がゆい思いをすることもありました。
まだまだやりたいことも勉強しなければいけないことも沢山ありますが、エンジニアとしてやりたいことが出来る環境で仕事が出来るということが、どれほど楽しいことかを実感した半年でした。</description></item><item><title>Machine Learning Casual Talks #3 に参加してきました。 #MCLT</title><link>https://www.grimrose.org/blog/2015/05/mclt03/</link><pubDate>Mon, 04 May 2015 11:49:15 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/05/mclt03/</guid><description>http://mlct.connpass.com/event/13995/
チームの分析官の人が喋ってる内容を実際に運用している話が聞けそうなので、申し込んでみたところ運良く抽選に当たったので、参加してきました。
ある程度予習をして参加しましたが、やはり勉強不足であることは否めませんでした。
ただ、分析官がやりたいことがどういったことなのか、実現するとどうなるのかを知ることが出来ました。
まずは、機械学習の基本となる部分を勉強しておく必要があると感じました。
その為にも分析官が利用しているR言語を習得し、実現したいことがどういったものか理解してみたいと思いました。
参加者、発表者の皆様、主催の@chezouさん、会場を提供して下さったクックパッド株式会社様ありがとうございました。</description></item><item><title>Yokohama.groovy #31 に参加してきました。#yokohamagroovy</title><link>https://www.grimrose.org/blog/2015/04/yokohama-groovy-31/</link><pubDate>Wed, 29 Apr 2015 22:28:34 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/04/yokohama-groovy-31/</guid><description>http://connpass.com/event/13786/
プログラミングGROOVY読書会 主催している「プログラミングGROOVY」の読書会の最終回でした。
2012年に開催されていた読書会の時間数から、おおよそ3回くらいだろうと見積もっていましたが、余裕を持って終えることが出来ました。
少し早めに終わったので、2.3から導入されたGroovyのtraitについて、スライドとサンプルを見ながら学んでました。
サンプルは、Groovy Goodness: Chaining Traitsです。
残り時間は、次回以降やりたいことを決めていました。
https://github.com/yokohamagroovy/support/issues/11
「プログラミングGROOVY」の読書会は、また要望があり次第適宜開催していければいいな、と思っています。
参加して下さった皆様、ありがとうございました。
次回 「Gradle徹底入門」の読書会を開きます。
イベントも既に用意してます。
http://connpass.com/event/14584/
予定としては、基礎編を2回位で学んで、3回以降は発展編で試していく予定です。
が、需要がどれくらいあるか全く読めないので、ひとまず会場と人数は今まで通りです。
もし私を含め5人以上になった場合、別の会場を探すことになると思います。
もし興味がありましたら、よろしくお願いします。</description></item><item><title>渋谷JVMに参加してきました。 #渋谷JVM</title><link>https://www.grimrose.org/blog/2015/04/shibuya-jvm/</link><pubDate>Tue, 21 Apr 2015 00:05:36 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/04/shibuya-jvm/</guid><description>http://d-cube.connpass.com/event/13257/
JVM言語の集い 初めは、JVMについてのイベントだと思ってました。
そうではなく、JVM上で動く言語の中でも代表的な言語(Java, Scala, Clojure, Groovy)のエキスパートと呼ばれる人たちが一堂に会する機会が設けられたということで、参加してきました。
特に印象的だったのは、この時でした。
個人的には、Java8になったことによって、ライブラリのコアとなる部分が置き換わって、新陳代謝が起こって欲しいなと思いました。
パネルディスカッション 川島さんがJJUG CCCで話されていたJobStreamerに興味を持ってから、Clojureに興味が出てきました。
Clojureについて知らなかったところが多く、とても勉強になりました。特に思想や哲学に関する部分は、惹かれました。
それぞれのエキスパートの方々の話も大変面白く、ファシリテーターの@jfluteさんの質問もとても興味深いものばかりでした。
@jfluteさん、お疲れ様でした。
おわりに 懇親会のLTもバラエティ豊かで、読書会の告知しか用意してなかった自分がちょっと恥ずかしかったです。
全体的にJJUG CCCとは違った雰囲気があって、楽しかったです。 登壇者、参加者の皆様、会場を提供して下さった株式会社ビズリーチ様、ありがとうございました。</description></item><item><title>nodeschool tokyo (東京Node学園 入学式) に参加してきました。 #nodeschool_tokyo</title><link>https://www.grimrose.org/blog/2015/04/node-school/</link><pubDate>Sat, 18 Apr 2015 01:00:10 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/04/node-school/</guid><description>http://nodejs.connpass.com/event/13182/
node.jsを体系だって学ぶ機会がこれまで無かったので、参加してきました。
nodeschool http://nodeschool.io/index.html
http://nodeschool.io/tokyo/
世界中で開催されているワークショップらしいです。
ワークショッパーを利用してステップアップしながら学んでいくスタイルでした。
参加者も様々なスキルレベルの人がいらっしゃったみたいです。
learnyounode https://github.com/rvagg/learnyounode
ワークショッパーのお陰で、詰まりながらも進める事が出来ました。
とは言え、Javascriptのスキルが低く、Make it modular までしか出来ませんでした。
GitHubのレポジトリには、日本語のドキュメントもあるので続きをやってみたいと思います。
LT 興味深かったのは、https://hexi.pics/ についてのLTでした。
今回頂いたステッカーを作ったサービスらしく、どのように進めていったのか、苦労したのかというのがとても興味深かったです。
International Day http://nodeschool.io/international-day/
2015年5月23日にまた開催される予定らしいです。
期待して待ってみましょう。
メンター、参加者の皆様、会場を提供して下さったサイバーエージェント様、ありがとうございました。</description></item><item><title>JJUG CCC 2015 Springに参加してきました。 #jjug_ccc</title><link>https://www.grimrose.org/blog/2015/04/jjug-ccc/</link><pubDate>Wed, 15 Apr 2015 23:02:31 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/04/jjug-ccc/</guid><description>http://www.java-users.jp/?page_id=1647
セッション 実は、転職して現場でJavaを書く機会がかなり減っています。
が、ツールやライブラリ等JVM上で動くプロダクトを使っているので、運用にまつわる事で勉強したいと思い参加しました。
午前は、途中から参加して、Raspberry Piのセッションから見始めました。
通訳まで用意するの大変だったと思います。内容もかなりリサーチされていてとても楽しい内容でした。
午後は、以下のセッションを選択しました。
CD-1 Javaにおけるnull。これまでとこれから AB-2 Web開発における最新テスト手法 AB-3 大規模な負荷でもドキドキしない為のJava EE CD-4 『Embulk』に見るモダンJavaの実践的テクニック ～並列分散処理システムの実装手法～ F-6 いろんなデータをKibana4で見てみよう F-7 JobStreamerではじめるJavaBatchクラウド分散実行 特に、Embulkについては、実際に利用できるか検証してることもあり、興味深く聴いていました。
負荷テストについても、大規模とはいかないまでもそこそこのデータ量を扱っているので、どう対応したら良いか参考になりました。
Kibana4も監視周りで使ってみたいと考えているので、ひとまずGitのログの監視からしてみたいと思いました。
その他のセッションも、登壇者のバックグラウンドが様々で、面白い内容でした。
おわりに Twitterでお世話になっている人が参加されていたので、探して挨拶したり、同じように休憩してる人達と雑談してました。
個人的には「Ask the Speaker」みたいなコーナーが有ってもいいのではないかなと思いました。
初めてJJUG CCCに参加された方も多く、JJUGにも若い幹事の方が就任したりして、広がりを感じました。 Java以外の分野から入ってきた文化や価値観もそれなりに知っておかないと、Javaだけの進化で手一杯になりそうな印象があります。
JJUG CCCやナイトセミナーでは、そういった題材を扱っている良い機会だと思いますので、 まだ周りの人で参加してなくて興味がある人がいらっしゃったら、是非誘って参加してみてはいかがでしょうか。
JJUG、スポンサーの皆様、ありがとうございました。</description></item><item><title>Hugoを使ってみます。</title><link>https://www.grimrose.org/blog/2015/04/start-with-hugo/</link><pubDate>Mon, 13 Apr 2015 00:25:58 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/04/start-with-hugo/</guid><description>これまでは、Bloggerで書いていました。
ですが、下書きから公開まで全てがブラウザに依存しているため、書こうと思ってから書く気力がだんだん落ちて、 下書きが溜まって、最終的に公開しないままいく一方でした。
テキスト書くときは、AtomとIntelliJ IDEA使っているのですが、 どちらもコマンドエディタからコンソールまでほぼ完結しているので、blogも何とか出来ないかなと思ってました。
仕事で使うドキュメントの生成ツールの検証も兼ねて、Markdownで書ける静的サイトを作れるツールでいろいろと探していたところ、Hugoがとても印象的でした。
Goで書かれているためか動作が早く、ドキュメントもひと通り揃ってました。
今後は、このHugoを使って行きたいと思います。
テーマは、シンプルなHugo Zenを使うことにしました。
今後はこのテーマをベースにカスタマイズしていく予定です。</description></item></channel></rss>