<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clojure on open build/reports/life/index.html</title><link>https://www.grimrose.org/blog/categories/clojure/</link><description>Recent content in Clojure on open build/reports/life/index.html</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 14 Dec 2015 00:00:00 +0900</lastBuildDate><atom:link href="https://www.grimrose.org/blog/categories/clojure/index.xml" rel="self" type="application/rss+xml"/><item><title>Clojure ワークショップ(仮)に参加してきました #jc_ws</title><link>https://www.grimrose.org/blog/2015/12/jc-ws-2015/</link><pubDate>Mon, 14 Dec 2015 00:00:00 +0900</pubDate><guid>https://www.grimrose.org/blog/2015/12/jc-ws-2015/</guid><description>はじめに 【参加者募集】 Clojure ワークショップ(仮)に参加してきました。
きっかけは、以前にしょぼちむにデータモデル設計について教えてくださいの会 #syobobenで@kawasimaさんが 以下のプレゼンをした時にでてきたDatomicが気になったからです。
その後、@kawasimaさんがリリースしたJobStreamerがDatomicが使われていたので、 どうやって使ったらいいのかを知りたい、せめてClojureが読めるようになりたいと思ってました。
その後の渋谷Javaなどで@kawasimaさんがClojureの話をされていたので、無意識に刷り込まれていたのかもしれません。
あやぴーさんが開催されるとのことだったので、楽しみにしてました。
キメるClojure タイトルは「Rubyをキメると気持ちいい」から来てるとおもいますが、挙げられているClojureのコードを後から見なおしてみるとすっきりしていて分かりやすかったです。
こういう思想で作られていると使いやすいのではないかと思いました。
ワークショップ あやぴーさんが用意して下さったjapan-clojurians/curriculumのチートシートをまず読んでました。
はじめは、jupyterでもできないかなと思い、Clojureのroryk/clojupyterを入れてやろうとしてましたが、 ZeroMQとの連携が上手く行っていないのかエラーがでて使えませんでした。 ClojureではGorilla REPLを使うのが良いらしいので、今度使ってみようと思います。
仕方ないので、前日に用意していたIntelliJ IDEAとCursive pluginでやることにしました。
その後は、紹介されていたClojure koansをずっとやってました。
穴埋めで、1問づつ答えていく形式なので、困ったときはREPLで確かめながらやってました。
普段は、スニペットの確認はREPLではなくテストコードでやっているので、ClojureのREPLがここまで便利だとは思ってませんでした。
おわりに togetterはこちら -&amp;gt; Clojure ワークショップでした！。
これでClojureを読める手段を手に入れることが出来たので、JobStreamerのコードを読んで行こうと思います。
いずれは、イミュータブルデータモデルとDatomicを使った何かを作ってみたいと思います。 あとAltJSの一つとしてClojureScriptも興味が出てきたので、watchしていこうと思います。
あやぴーさん、TAの皆様、会場を提供して下さったサイボウズスタートアップス株式会社様、ありがとうございました。</description></item></channel></rss>