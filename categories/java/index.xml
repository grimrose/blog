<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on open build/reports/life/index.html</title>
    <link>https://www.grimrose.org/blog/categories/java/</link>
    <description>Recent content in Java on open build/reports/life/index.html</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 09 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.grimrose.org/blog/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JJUG CCC 2018 Springに参加してきました #jjug_ccc</title>
      <link>https://www.grimrose.org/blog/2018/06/jjug-ccc-2018/</link>
      <pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.grimrose.org/blog/2018/06/jjug-ccc-2018/</guid>
      <description>http://www.java-users.jp/ccc2018spring/
参加したセッション 今回は、午後から参加したので、以下のセッションに参加してきました。
 Scala製システムを3年間運用することで起きた様々なことへの対処 Apache Kafkaとストリーム処理 Spring Cloud, Docker &amp;amp; Kubernetes - Lessons Learned in the context of an OSS Project Networks and Types &amp;ndash; Typed Reactive Systems with Akka GKEとgRPCで実装する多言語対応・スケーラブルな内部API Google Dataflow(Java)を使ったビッグデータのバリデーション  Javaを書かなくなって以来、そういうセッションをメインに選んできましたが、そういう傾向なのかセッションもJavaだけでなくアプリケーションを取り巻くミドルウェアやインフラ周りの内容が増えて来ましたし、 興味深いセッションが多く、今回は迷いました。
k8sやmicro serviceといった内容が増えてきたことでJavaだけでなく参加者が携わる領域が増えてきているということなんだと思いました。
特にモノリシックなサービスをk8sに載せられるように改善していく事例の紹介はとても勉強になりましたが、しゃべるスピードが早すぎてついていくので精一杯でした。
  JJUG CCC 2018 : Lessons Learned: Spring Cloud -&amp;gt; Docker -&amp;gt; Kubernetes  from Mauricio (Salaboy) Salatino 
あとから資料見直してみるととても示唆に富んだいい内容だったので、もっと英語のスキルを上げていければと思いました。
その他のセッションも、普段の開発にも取り入れられそうなものがあったので、試してみたいと思います。
おわりに 今回は、参加者も慣れたのか動線がしっかりしていて、前回よりもさらにスムーズだと感じました。
懇親会も普段会えない人と話することが出来てとても楽しかったです。 いろいろ第一人者から直接聞ける機会は少ないので、懇親会はとてもありがたいです。
 @grimrose7がシェアした投稿 - 2018年 5月月26日午前3時29分PDT</description>
    </item>
    
    <item>
      <title>JJUG CCC 2017 Fallに参加してきました #jjug_ccc</title>
      <link>https://www.grimrose.org/blog/2017/11/jjug-ccc-2017/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.grimrose.org/blog/2017/11/jjug-ccc-2017/</guid>
      <description>http://www.java-users.jp/ccc2017fall/
参加したセッション 今回は、午後から参加したので、以下のセッションに参加してきました。
 モブプロで実施する Cognitive Service &amp;amp; Bot ハッカソン #2 ゴールドマン・サックスにおけるCamundaを用いたビジネスプロセスの可視化とワークフローの自動化 Spring BootとKafkaでCQRSなアプリを動かしてみる Java でつくる本格形態素解析器  今回は、Java以外で面白そうなのと仕事で使えそうなのを選んでみました。
特に一番印象深かったのCQRSの話でした。
しーばさんのCQRSの話を聞いて、今の課題をどう伝えたらCQRSの考え方で解決してもらえるかいろいろ思い浮かべてる
&amp;mdash; とーます (@grimrose) November 18, 2017 
実際にCQRSが使ったほうがいい課題があるのですが、CQRSを全く知らない人にどうやって伝えたらいいのか考えてました。
 その後に、公開された資料を元に自分たちの課題を題材に、いろいろ議論しながらモブプロ出来たらいいなぁとふわふわ考えてました。
アンカンファレンスで話したこと 今回、JJUGでアンカンファレンスが実施されるとのことなので、ScalaMatsuri 2018の宣伝をしてきました。
「コミュニティの宣伝でもいい？」と相談してみたところ、良い返事がいただけたので、「ScalaMatsuriへのお誘い」ということで出したところ採択されました。
アンカンファレンスのテーマが決まりました！
13:30よりL部屋で実施します。ぜひお越しください！
13:30- プログラミング教育、スキルの伸ばし方について
14:30- Javaプロセス監視について
15:45- お仕事のやりがい、コミュニティについて
16:45- マイクロサービスについて
17:45- JVM言語について
&amp;mdash; JJUG (@JJUG) 2017年11月18日 
15:45からの回に決まったので、話す内容はScalaMatsuriの宣伝で、今年の新しい試みであるScalaMatsuri Tranining Dayの紹介をしようと考えてました。
実際は、「仕事のやりがい、コミュニティについて」という括りの中でいろいろディスカッションする感じでした。 なので、内容もちょっと変えて、私が知っている範囲ではありますが、Scalaのコミュニティへ参加している人たちの変遷や、 ScalaMatsuriが公開している資料を元にコミュニティやカンファレンスに参加している人たちの変遷や、 コミュニティそのものの成熟度合いとの関係を話しました。
上手く伝えられたかは実感が無かったのでどこまで宣伝できたか分かりませんが、JJUG CCCに参加している人たちの働いている環境について知る機会が出来たのは、とても良かったです。
おわりに 今回は、懇親会ではtwitterで知り合った人といろいろ話せたのでよかったです。
ユーザの導線も上手く誘導できているように感じたので、前回に比べて移動とかが楽になっていたように感じました。
JJUGのスタッフの皆様、スポンサーの皆様、講演者の皆様、参加者の皆様、ありがとうございました。</description>
    </item>
    
    <item>
      <title>JJUG CCC 2017 Springに参加してきました #jjug_ccc</title>
      <link>https://www.grimrose.org/blog/2017/05/jjug-ccc-2017/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.grimrose.org/blog/2017/05/jjug-ccc-2017/</guid>
      <description>http://www.java-users.jp/ccc2017spring/
参加したセッション 今回参加したセッションは、以下のとおりです。
 Java libraries you can&amp;rsquo;t afford to miss Unified JVM Logging: Java 9 から変わる JVM ログ 今日からDL4J グラフデータベース入門 Engineers can change the world ～ &amp;ldquo;世界&amp;rdquo; で活躍するエンジニアになるために Ordinary Object Pointer について調べてみた  今回は、業務で使うJVMに関する内容や使いそうなグラフデータベースやDL4J、英語を聞く機会を増やしたいと思ったので、このリストになりました。
他のセッションも興味深かったり、被ってさえいなければ聞きたかったのもあったので、ここ数年、JJUG-CCCのセッション選びはホントに悩ましいです。
今回一番印象に残ったセッションは、「Engineers can change the world ～ &amp;ldquo;世界&amp;rdquo; で活躍するエンジニアになるために」で、Microsoftに移られた寺田さんと上司である Drew Robbinsさんの働き方についての内容でした。
JJUG-CCC-Dreams-Come-True-With-Drew—Terada YoshioDocs.com
人材紹介のドメインで業務をしていると、求職している人の働き方や考え方、企業自体がどういった人が求めているのかを着目するようになってきました。
その中でもソフトウェアエンジニアは、自分の職業の一つでもあるので、他の企業の、しかも日本ではなく世界に同じ職種を抱えている人の話を聞くのはとても興味深かったです。
最後にビデオを見る機会があったのですが、昔はSFの話だと思っていたことが、実はコードで実現出来るかもしれない未来がそこまで来ているのを見せられたので、とても印象に残ってました。
 コードで世界を変えていく仕事って、やっぱカッコイイよな。って思わせてくれるいいセッションでした #ccc_g6
&amp;mdash; とーます (@grimrose) 2017年5月20日 
 おわりに 懇親会では、twitterでしか知っていなかった人たちにご挨拶出来てよかったです。
1000人規模のカンファレンスになってしまい、いろいろと課題点とか見えているみたいですが、 以前に比べて裾野が広がっているように思えるので、ぜひよりよい結果に繋がるようになって欲しいと思います。
JJUGのスタッフの皆様、スポンサーの皆様、講演者の皆様、参加者の皆様、ありがとうございました。</description>
    </item>
    
    <item>
      <title>GParsのActorでアクターモデルに入門する</title>
      <link>https://www.grimrose.org/blog/2016/12/gadvent-2016/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.grimrose.org/blog/2016/12/gadvent-2016/</guid>
      <description>はじめに この記事は、G*Advent Calendar(Groovy,Grails,Gradle,Spock&amp;hellip;) Advent Calendar 2016の10日目のエントリです。
9日目 &amp;gt; nobeansさんのGrailsでUnix/Linux的実行可能WARファイルをつくるです。
11日目 &amp;gt; tyamaさんのGrailsでServer Sent Eventsを送信！(意訳版)です。
GParsとは GParsは、GroovyとJavaで利用できる並行・並列処理を利用しやすくなるライブラリです。
[Groovy]GParsで並列処理（基本＆コレクション編）を見ていただくと、 旧来のThreadや、java.util.concurrentをそのまま使うよりも並行処理が書きやすそうだと感じたのではないでしょうか。
GroovyがApacheに寄贈され、codehausが停止してしまったため、ソースコードやドキュメントがgithubに移管されています。
GPars/GPars
versionは、1.2.1のままです。
ですので、Gradleで利用する際は、以下のように依存を追加すれば利用できるようになります。
// https://mvnrepository.com/artifact/org.codehaus.gpars/gpars compile group: &#39;org.codehaus.gpars&#39;, name: &#39;gpars&#39;, version: &#39;1.2.1&#39;  Actorモデルについて アクターモデルについては、アクターモデルを見てください。
アクターモデルの実装されているもので代表的なものは、ErlangとAkkaが挙げられます。
この2つについては、もうエコシステムとも呼べるようなものになってしまっているので、アクターモデルだけを知ろうとすると、どこから手をつけていいのか分かりにくくなります。
そこで、GParsのActorを使ってアクターモデルの考え方を理解して行こうと思います。
GParsのActor GParsのActorのドキュメントを見ると、Actorの作り方はとてもシンプルです。
import groovyx.gpars.actor.Actor def actor = Actors.actor { loop { react { msg -&amp;gt; println &amp;quot;Received: $msg&amp;quot; } } } actor.send &#39;Hello, GPars!&#39; actor.join() // 停止するまで立ち上がったままにする。 // 止めるときはCtrl-C or プロセスを落とす  いわゆるPingPongをする場合はこんな感じです。</description>
    </item>
    
    <item>
      <title>JJUG CCC 2016 Fallに参加してきました #jjug_ccc</title>
      <link>https://www.grimrose.org/blog/2016/12/jjug-ccc-2016/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.grimrose.org/blog/2016/12/jjug-ccc-2016/</guid>
      <description>http://www.java-users.jp/ccc2016fall/
参加したセッション 今回参加したセッションは、以下のとおりです。
 SIerもはじめる、わたしたちのDevOps 先取り Elasticsearch 5.0 ハンズオン！ JVMのトラブル解決のためにやったこと~メモリー/スレッド Spring Cloudアプリケーションの開発にDockerを活用し、Kubernetes上にデプロイするまで Featherweight JavaやGroovyの漸進的型付けについて  今回は、仕事でElasticsearchを検証している際に入門的なものを知らないと先に進めなさそうと感じたので、ハンズオンを優先的に選択しました。
その他のセッションについては、Javaのセッションよりも仕事で使うJVMやkubernetesに関するものや、数少ないGroovyのセッションを選んでみました。
寝坊してしまったため、午前の基調講演とそのあとのセッションの一部を聞けず、流れてくるTwitterを見ながら早く聞いて見たいと思ってました。
途中からでしたが、顧客が社内の人達ということで、自分の今の環境と照らし合わせて聞いていました。
裏でいろいろ教育や環境を整えているかわしまさんのスゴさを改めて知ることが出来たのと、その教えを忠実に守って継続していくしょぼちむさんのチームが素晴らしかったです。
R&amp;amp;D部門の阿佐さんのDockerのオーケストレーションの話がとても興味深かったです。まさか資料がkubernetesで動いてるとは思いませんでした。
Elasticsearchのハンズオンは、特にkibanaあたりの内容が足りていなかった自分にとって勉強になりました。
JVMのトラブルシューティングについては、初心者向けだったのか、JVMの基本的な概要とトラブルシューティングのツールの説明が主でした。 なのでちょっと物足りなく感じましたが、JJUG CCCの参加者の多くが初めての人が多いことを考えれば、仕方ないと思います。
Spring Cloudの他のセッションをあらかじめ聞いておけば良かったと思えるほど、Spring CloudとKubernetesを連携させて動かすことができる環境を用意できるfabric8が凄かった印象でした。 Kubernetesの設定ファイルとかその他の設定もよしなにしてくれるpluginがMavenしか最新版が無いのが本当に
Featherweight JavaはJava基礎勉強会の時に説明されていたので、ある程度覚えていましたが論文自体を全部読んでいなかったので丁寧に説明してくださって助かりました。 @TypeCheckedや@CompileStaticをそういう使い方もできるのかとGroovyの奥深さを新たに知ることが出来ました。
おわりに 懇親会は、初めの方だけ参加させていただきましたが、いろいろな方とお話しできて良かったです。 次回のJJUG CCCで時間の都合でご挨拶できなかった方にお会いしたいと思ってますので、よろしくお願いします。
JJUGのスタッフの皆様、スポンサーの皆様、講演者の皆様、参加者の皆様、ありがとうございました。</description>
    </item>
    
    <item>
      <title>JJUG CCC 2016 Springに参加してきました #jjug_ccc #ccc_m61</title>
      <link>https://www.grimrose.org/blog/2016/05/jjug-ccc-2016/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0900</pubDate>
      
      <guid>https://www.grimrose.org/blog/2016/05/jjug-ccc-2016/</guid>
      <description>発表のキッカケ ちょうど日々の業務でGradleのタスク機能を利用して、共有ディレクトリにあるExcelのデータとDBの値とチェックしたり、 前回の作業との差分を抽出して入力ミスがないかチェックしたり、といった小さい業務タスクを自動化していたので、 50分は無理でも新しく出来た20分枠ならイケるんではないかと思い、 Groovy枠として選ばれたら本気でやるかといった感じで応募しました。
なので、十徳ナイフとしてのGradle / @grimrose #35に投票して頂いた皆様には、大変感謝しております。
jupyter使ってる理由 ここ最近、発表資料にはjupyterを活用しています。理由としては以下のとおりです。
 日常的に使っている。 Markdownで書ける。  スライドの確認がし易い。 リンクや画像を埋めるのが楽。 コードのシンタックスハイライトもされる。  Docker imageにしてしまえば、docker runかdocker-compose upですぐに使える。 takluyver/bash_kernelを入れれば、jupyer-notebookからbashが使える。 GitHubへpublishすれば、nbviewerで閲覧できる。  標準のPythonやSpark向けのイメージを使えば、REPL代わりに使えるし、実行結果も保存出来たり等重宝してます。
発表の主旨 今回の発表で一番伝えたかったのは、「ツールは達成したい目的によって変えましょう」ということです。 「日常業務を楽にしたい。」であれば、自分の本来やらなければならないメインの仕事に割り当てる時間を増やすというのが目的なので、 今回は自分が使えて、すぐに解決出来る「Gradle」を採用したまでです。
もちろん、Excelを使うヒトとの協調が必要であれば、Excel VBAも利用します。
Gradleで解決したタスクもゆくゆくはシステム化を目指すのであれば、それに依存するのではなく捨てられるようにしておくのが望ましいと思います。
そのままシステム化しようとすると、手段が目的となってしまい、本来解決しなければならなかった課題にたどり着くことが出来ず、 自分だけしかメンテナンス出来ない負債が残るだけです。
サンプルの解説 Gradleのタスク機能を使ったサンプルプロジェクトは、こちらです。
grimrose/JJUG-CCC-2016-Spring
あるプロジェクトを一つのworkspace配下において行くような場合を想定してます。
そのプロジェクトを構成しているそれぞれの個別プロジェクトを、Gradleのマルチプロジェクト機能を利用して、Gradleの依存を含めること無く操作できるようにするのが目的です。
特にフロントエンドは、完全に趣味とトライアルに走ってみました。 個人的に気になっているMithrilとTypescript, power-assert-js, webpackの組み合わせに挑戦してみました。
その他のプロジェクトも、jarを動かしたり、JRubyを使ってRubyのプロダクトを動かしたり等、Gradle WrapperとJDKが入っているだけのマシンでここまでやれたり、 プロダクトを統括するタスクランナーとしてのGradleというのを示すことが出来たのではないかと思います。
参加したセッション 今回参加したセッションは、以下のとおりです。
 E-2 ブラウザテストをサクサク進めるためのGeb実践入門 GH-3 Jenkins2.0 AB-4 Introduction to JShell: The Java REPL Tool AB-5 Apache Apexとインメモリー最適化による超高速処理の世界 AB-6 ビッグデータじゃなくても使えるSpark☆Streaming GH-7 Java Pazzler M-7_2 JVM上でのストリーム処理エンジンの変遷  セッション数が増えたのと20分枠のおかげで、体がいくつあっても足りないという感じでしたが、 休憩のタイミングと間隔にゆとりがあったおかげでそこまで大変では無かったと思いました。</description>
    </item>
    
    <item>
      <title>Spock Frameworkに関する電子書籍たち</title>
      <link>https://www.grimrose.org/blog/2015/12/gadvent-2015/</link>
      <pubDate>Sat, 19 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www.grimrose.org/blog/2015/12/gadvent-2015/</guid>
      <description>はじめに この記事は、G* Advent Calendar 2015の19日目のエントリです。
Spockについて Spock Frameworkは、JavaやGroovyで作られたアプリケーション向けのテスティングフレームワークです。
個人的にSpock Frameworkが好きな理由の一つは、power-assert機能です。
power-assertが他の言語のテスティングフレームワークでも取り入れられていったのは、覚えるAPIが少ない上にテストで失敗した時の情報が分かりやすいからだと思います。
 アサーション失敗時の情報量を大幅に増やすことができるPower Assertの系譜
 仕事ではScalaTestを使っていますが、 power-assertのように使えるDiagrammedAssertionsをメインに使ってます。
その他にもパラメタライズドテストが書きやすかったり、Given-When-Thenと振る舞いを分かりやすく書ける機能があったりと、開発者がテストを書くのを助けてくれるのがとても好きです。
2015年のSpock Frameworkと言えば、なんと言ってもついに1.0がリリースされたのことでしょう。
Google Codeが終了するするにあたって、さまざまな事が一気に前進したように思えます。
公式のリファレンスもGitHubに移動し、Spock Framework Reference Documentationとして公開されています。
JUnit5がリリースされるとなるとSpockもどのように対応するのか楽しみではあります。
Spockを題材とした電子書籍 日本でも利用されている方が増えてきたおかげか日本語の記事や情報を見かける機会が増えましたが、本格的に導入していこうとすると英語の記事を見ることになります。
公式のリファレンスが充実しているので困ることは少ないですが、やはり自分たちのユースケースに近いサンプルがあるのが望ましいと思います。
そういう場合は書籍の出番となりますが、今回は入手しやすい電子書籍を探してみました。
普段利用している電子書籍を購入できるサイトで、Spockに関する書籍が見つかったのは、以下のとおりです。
 O&amp;rsquo;Reilly Manning Publications Leanpub  O&amp;rsquo;Reillyは有名なので割愛するとして、Manning PublicationsはGroovy In Actionや Grails in Actionで以前からGroovyに関する書籍を取り扱っているのは知ってました。
注目したいのは、Leanpubで以前Everyday Rails - RSpecによるRailsテスト入門を購入した際に利用していました。
Groovyについて困っている時やどう書いたらいいのか分からない時にMessages from mrhakiで探していますが、 その著者がLeanpubでGroovy Goodness NotebookやGradle Goodness Notebookといった Groovyに関する書籍を販売しており、その一つにSpockに関するものもありました。
購入したもの これまで購入したのは、以下の3冊です。
 Spocklight Notebook Groovy in Action, Second Edition Spock: Up and Running  まずSpocklight Notebookですが、Leanpubで購入できます。実はWebで全部見れてしまう上に最低価格が$0なので実質Freeなのです。 中身もユースケース毎に細かく分かれているため、自分たちの求めている内容がきっとあると思います。</description>
    </item>
    
    <item>
      <title>JJUG CCC 2015 Fallに参加してきました #jjug_ccc</title>
      <link>https://www.grimrose.org/blog/2015/11/jjug-ccc-2015/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www.grimrose.org/blog/2015/11/jjug-ccc-2015/</guid>
      <description>http://www.java-users.jp/?page_id=2056
セッション 今回は、以下のセッションを選択しました。
 keynote-1 基調講演1: 「Javaは守りに入らない、これが今のJavaだ」 keynote-2 基調講演2: Java EE 8 – Work in Progress AB-1「jOOQ と Flyway で立ち向かう、自社サービスの保守運用」(仮) EF-2 How to speed up your application using JCache[通訳あり] EF-3 Reactive Webアプリケーション – そしてSpring 5へ EF-4 ソラコムでのJava/AWS活用 – SIM管理やAWS Lambda Javaなど – AB-5 Javaエンジニアに知ってほしい PostgreSQLアンチパターン GH-6 Java8 Stream APIとApache SparkとAsakusa Frameworkの類似点・相違点 GH-7 てらだよしおの赤裸々タイム  今回のタイムテーブルを見たら、どのセッションを見たら良いのか迷ってしまうくらい素晴らしい講演者の方々でした。 選んだ幹事の人達も苦労されたと思います。
この1年、素のJavaを書くことは無くなってしまったので、選択も運用やDB等言語としてのJava以外を中心とした内容になりました。
どのセッションも面白かったですが、てらださんが楽しそうに活動をされている話を聞けたのが、一番印象的でした。
さらに懇親会や帰り道でいろいろな人とお話が出来て、その中でいろいろ解決手段などを教えていただくことが出来ました。 ありがとうございました。
 懇親会と帰宅までの間が一番実りがある話が聞けた。&amp;#10;これがあるから止められない。
&amp;mdash; とーます (@grimrose) 2015, 11月 28</description>
    </item>
    
    <item>
      <title>Seasar Conference 2015 Not 同窓会 に参加してきました #seasarcon</title>
      <link>https://www.grimrose.org/blog/2015/09/seasarcon2015/</link>
      <pubDate>Tue, 29 Sep 2015 01:25:47 +0900</pubDate>
      
      <guid>https://www.grimrose.org/blog/2015/09/seasarcon2015/</guid>
      <description>https://event.seasarfoundation.org/sc2015/
http://seasar.connpass.com/event/19317/
Seasar2はプロダクトでも使ったことがあるし、Seasar Conferenceがあったおかげで今の自分があると思っているので、参加してきました。
セッション  Seasar ユーザだったプログラマが目指す OSS の世界展開
 瀬良さんのセッションは、大学の教室ということもあり本当に歴史の授業っぽい雰囲気でした。 Skinny Frameworkは、今のプロジェクトで使っていて大変お世話になっています。 特にSkinny-ORM, ScalikeJDBCはSQLをゴリゴリ書くようなプロダクトに向いていると思います。 GitHubがデファクトとなっている現状では、日本語より英語のドキュメントを充実するほうがより使ってもらえる可能性が高いのは確かだと思います。  Play Framework + Scala は Next Seasar なのか
 Next Seasarについては、既存のSeasar2を利用したプロダクトを別のフレームワークに置き換えてもそれなりに利益を生むようなものでない限り時代に取り残されて行く運命なのかも知れないと感じました。 挙げられそうなNext Seasarとしては、Spring bootやJavaのMicroframeworkやJava EE等があります。 ですが、メンテナンスする人達がJavaの進化に置いて行かれるような場合、選択すら出来ずどうすることも出来ない状態に陥るのではないかと思います。  「Single Command Deployのためのgradle-aws-plugin講座」〜自動ビルド厨はここまで大きくなりました〜
 Gradleの話を聞いてみたかったのと、AWSへのデプロイツールとしてどう使うのか興味がありました。 ドキュメントに残さなければいけない箇所を出来る限り少なくして、自動化するというのはとても参考になりました。  Spring Boot for the Seasar Developers – みんなが欲しかったアレもソレもここにある
 ライブコーディングでサクサクとSpring bootを使ったWebアプリを作っていくのは、楽しそうに見えました。 Spring bootのremote-shellは、CRaSHがベースなので、単体でも使うことが出来ます。 IntelliJ IDEAであれば、Using Language Injectionsを使うことで、StringのSQLに対してシンタックスハイライトを付けることが出来るようになります。  SIは本当に終わったのか?
 受託やSIの世界から遠ざかってしまったので、第三者的な視点で見てました。 元請けの視点がメインだったので、下請けからの視点が無かったのはちょっと残念だと思いました。 実際に利用するユーザのフィードバックと取り込めるような距離感が無いと、今後も厳しそうだと感じました。   おわりに Seasar2から卒業ということで、自分が変わるキッカケになったSeasar Conferenceに久しぶりに参加できてよかったと思います。</description>
    </item>
    
    <item>
      <title>JUnit Lambda に寄付をしました #fundJUnit</title>
      <link>https://www.grimrose.org/blog/2015/09/junit-lambda/</link>
      <pubDate>Sat, 19 Sep 2015 00:04:27 +0900</pubDate>
      
      <guid>https://www.grimrose.org/blog/2015/09/junit-lambda/</guid>
      <description>@t_wada さんのツイートから知りましたが、JUnitのプロジェクトが援助を求めているそうです。
 JUnit がクラウドファンディングで援助を求めている。現在フルタイムのメンテナがおらず、 issue 解決や Java8 対応 (特にラムダ式) の余力が無い。現時点の JUnit の問題点や将来像も示されている #fundJUn… http://t.co/o8ijOxTWr2
&amp;mdash; Takuto Wada (@t_wada) 2015, 9月 16 
 Crowdfunding JUnit Lambda
日本語での詳細な内容については、JUnitの開発が資金不足で行き詰まり。クラウドファンディングで寄付金を募集中 を見ていだくのがいいと思います。
JUnitと私 個人的にJUnitを真面目に使い始めたのは、TDDBCで使い方を教わってからだと思います。
その時教えていただいた渡辺さんが書かれたJUnit実践入門を読んで、Javaでユニットテストを書くにはどうしたら良いかを学ぶことが出来ました。
それからGroovyと出会い、Spock Frameworkに惚れてTDDBCのGroovyのTAをやったり、アジャイルサムライのイベントで紹介をしたりしてました。
現在の仕事では、PHPUnit、ScalaTestを使っています。
xUnit系テスティングフレームワークは、テストを書く際に覚えることが少なくて、ユニットテストの書き方を学ぶ際に、余計なことを覚えなくても済むのがメリットだと思います。
あと、モダンな言語であればだいたい備わっているので、言語を覚える際にもassertionの書き方を覚えればなんとか始められます。 それまでユニットテストを書く際の経験がそのまま言語を学ぶ際にも応用が出来るのが、xUnit系のテスティングフレームワークの良いところだと思います。
個人的にJUnitがもう少し頑張って欲しいのは、「パラメタライズドテストの書き方」、「失敗時のメッセージが分かりにくい」だと思います。
これはSpockを知ってしまってから、余計に感じるようになったと思います。
もちろんJavaの言語仕様として難しい部分もあると思いますが、出来ればpower-assertは入って欲しいと願ってます。
power-assertについては、日本語ではThe power-assert Leaves From Moratoriumがまとまっていると思います。
今回のFundingでどこまで機能が盛り込まれたり、改善されるかは経過を見守る必要があると思います。
Java8対応で特にDateTime APIでMatcherが早急に欲しい人は、AssertJを検討してみるのも良いかもしれません。
おわりに opensslと同様の経緯をまさかJUnitも歩んでいるとは思ってもいませんでした。
普段使っていたり、過去お世話になったOSSがメンテナンスされ続けるのは、誰かの犠牲や善意によって成り立っているのだと感じました。
また、「コードを書く」以外の事で貢献出来る何かを改めて考えさせられました。
もし、JUnitを使っていたり、今後も使い続ける事になるのであれば、既にゴール金額に到達していますが、寄付を考えてみてはいかがでしょうか？</description>
    </item>
    
    <item>
      <title>【東京】JJUG ナイトセミナー 「Reactive Streams特集」 に参加してきました。 #jjug</title>
      <link>https://www.grimrose.org/blog/2015/06/jjug-2015-reactive-streams/</link>
      <pubDate>Sat, 27 Jun 2015 18:19:34 +0900</pubDate>
      
      <guid>https://www.grimrose.org/blog/2015/06/jjug-2015-reactive-streams/</guid>
      <description>はじめに https://jjug.doorkeeper.jp/events/26547
@makingさんから、@okapiesさんと一緒に「Reactive Streams」について話してくれと頼まれましたので、参加してきました。
元々は、@cero_tさんが発端らしいです。
ちなみに今日のReactive Streams勉強会の発端は、ゴールデンウィーク明けに @cero_t さんがReactiveについてほげほげ言ってたことで、ナイトセミナーやろうぜって感じだったんだけど、当の本人は来ていないっていう
&amp;mdash; Toshiaki Maki (@making) 2015, 6月 24 
初めは、マイナーなネタならそんなに人集まらないだろうと思ってたのですが、キャンセル待ちが100人超えするくらいまで期待されてて正直びっくりしました。
当日のアンケートシステム、とても良かったので次回以降改善されるのを期待してます。
資料 @okapiesさんの資料は、こちらです。
 私の資料は、こちらです。
http://grimrose.github.io/jjug-2015-reactive-streams/
利用したサンプルコードは、こちらです。
https://github.com/grimrose/jjug-2015-reactive-streams
元々は、Vert.x3でやろうと思ってましたが、ReactorかRxJavaでと言われたので、使ったことがあるRxJavaを選びました。
確かに、当日のアンケートを見るとVert.x3、Ratpackの認知度が低すぎて、RxJavaを選択しておいてよかったと思いました。
ドキュメントの多さは、やはりRxJavaに分があるのですが、Reactorもかなり充実しています。
個人的には、MongoDB Reactive Streams Java Driverがチュートリアルとして、充実してると感じました。
初めてJavaでAkkaを使ってみたのですが、いろいろツライ印象しか受けませんでした。
あれなら、素直にScalaで使ったほうが分かりやすいと思います。
おわりに Reactive Streamsについては、それぞれのRuntimeの世界を繋ぐ為の仕様という認識が一番分かりやすいと思います。
実際の泥臭い部分は、Runtimeが頑張ってくれますが、何をやっているのか、どうやって実現しているのかを知っておくのは大切です。
どのRuntimeもReactive Streams向けに変換するライブラリがありますので、そのソースコードを読むのも勉強になると思います。
JDK9にどこまで採用されるか分かりませんが、データフロー制御についての共通インターフェースが採用されると、java.util.concurrentと併せて、非同期処理をもっと使いやすくなると思います。
JVMでデータフロー制御でお困りの方は、使ってみてはいかがでしょうか。
JJUGのスタッフ、参加者の皆様、@okapiesさん、ありがとうございました。</description>
    </item>
    
    <item>
      <title>JJUG CCC 2015 Springに参加してきました。 #jjug_ccc</title>
      <link>https://www.grimrose.org/blog/2015/04/jjug-ccc/</link>
      <pubDate>Wed, 15 Apr 2015 23:02:31 +0900</pubDate>
      
      <guid>https://www.grimrose.org/blog/2015/04/jjug-ccc/</guid>
      <description>http://www.java-users.jp/?page_id=1647
セッション 実は、転職して現場でJavaを書く機会がかなり減っています。
が、ツールやライブラリ等JVM上で動くプロダクトを使っているので、運用にまつわる事で勉強したいと思い参加しました。
午前は、途中から参加して、Raspberry Piのセッションから見始めました。
通訳まで用意するの大変だったと思います。内容もかなりリサーチされていてとても楽しい内容でした。
午後は、以下のセッションを選択しました。
 CD-1 Javaにおけるnull。これまでとこれから AB-2 Web開発における最新テスト手法 AB-3 大規模な負荷でもドキドキしない為のJava EE CD-4 『Embulk』に見るモダンJavaの実践的テクニック ～並列分散処理システムの実装手法～ F-6 いろんなデータをKibana4で見てみよう F-7 JobStreamerではじめるJavaBatchクラウド分散実行  特に、Embulkについては、実際に利用できるか検証してることもあり、興味深く聴いていました。
負荷テストについても、大規模とはいかないまでもそこそこのデータ量を扱っているので、どう対応したら良いか参考になりました。
Kibana4も監視周りで使ってみたいと考えているので、ひとまずGitのログの監視からしてみたいと思いました。
その他のセッションも、登壇者のバックグラウンドが様々で、面白い内容でした。
おわりに Twitterでお世話になっている人が参加されていたので、探して挨拶したり、同じように休憩してる人達と雑談してました。
個人的には「Ask the Speaker」みたいなコーナーが有ってもいいのではないかなと思いました。
初めてJJUG CCCに参加された方も多く、JJUGにも若い幹事の方が就任したりして、広がりを感じました。 Java以外の分野から入ってきた文化や価値観もそれなりに知っておかないと、Javaだけの進化で手一杯になりそうな印象があります。
JJUG CCCやナイトセミナーでは、そういった題材を扱っている良い機会だと思いますので、 まだ周りの人で参加してなくて興味がある人がいらっしゃったら、是非誘って参加してみてはいかがでしょうか。
JJUG、スポンサーの皆様、ありがとうございました。</description>
    </item>
    
  </channel>
</rss>